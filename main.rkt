#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 94 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 32
#"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 58 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 190 190 190 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 107 142 35 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 100 149 237 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 65 105 225 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 70 130 180 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 47 79 79 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 139 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 75 0 130 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 32 240 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 128 114 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 184 134 11 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 128 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 0 0 0 0 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 228 225 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 224 255 255 -1 -1 0
1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 9803 0 17 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 24 29 1 #"\n"
0 0 26 3 7 #"#reader"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"htdp-intermediate-lambda-reader.ss\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 24 3 3 #")(("
0 0 14 3 7 #"modname"
0 0 24 3 1 #" "
0 0 14 3 4 #"main"
0 0 24 3 3 #") ("
0 0 14 3 19 #"read-case-sensitive"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 10 #"teachpacks"
0 0 24 3 6 #" ()) ("
0 0 14 3 13 #"htdp-settings"
0 0 24 3 3 #" #("
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 11 #"constructor"
0 0 24 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 4 #"none"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #"; the size of each tile. For a single-player game, this is the entir"
 #"e world."
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; for a multi-player game, each time you go off the edge of a tile, "
 #"unless you are"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #"; at the edge of the world, you get a new tile."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"TILEWIDTH"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"TILEHEIGHT"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; beside* : takes a list of any length of images and sensibly applie"
 #"s beside to it"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #"; at zero length, returns empty, at one, it's an identity, beyond, i"
 #"t's normal beside."
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; note that this behavior makes it consistent with + and *, which at"
 #" zero arguments"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; return multiplicative/additive identity, at one argument return th"
 #"e argument."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"beside*"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 11 #"empty-image"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"beside"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"beside*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")) "
0 0 14 3 11 #"empty-image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"beside*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"beside*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #"; above* : takes a list of any length of images and sensibly applies"
 #" above to it"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #"; at zero length, returns empty, at one, it's an identity, beyond, i"
 #"t's normal above."
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; note that this behavior makes it consistent with + and *, which at"
 #" zero arguments"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; return multiplicative/additive identity, at one argument return th"
 #"e argument."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"above*"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 11 #"empty-image"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 5 #"above"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"above*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")) "
0 0 14 3 11 #"empty-image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"above*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"above*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 3 #") ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; list-set : update the given position in a list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"list-set: index can't be negative\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"list-set: index too large\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 1 #"v"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 19 3 27 #"\"list-set: index too large\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 19 3 35 #"\"list-set: index can't be negative\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; a player is an ID and a direction represented as an xdelta and yde"
 #"lta."
) 0 0 24 29 1 #"\n"
0 0 17 3 44 #"; the later pairs should only be in the set:"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; { (-1,0), (1,0), (0,1), (0,-1) }"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 6 #"xdelta"
0 0 24 3 1 #" "
0 0 14 3 6 #"ydelta"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; example players"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"player1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"player1-down"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"player2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player2\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"player3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player3\""
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"player4"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player4\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; an orientation is a position direction represented as xdelta and y"
 #"delta, as with player"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 11 #"orientation"
0 0 24 3 2 #" ("
0 0 14 3 4 #"posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"xdelta"
0 0 24 3 1 #" "
0 0 14 3 6 #"ydelta"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 112
(
 #"; a cell is a pair of lists: one of contents of materials ('rock, 'w"
 #"ater, 'grass, 'wood, or (list 'tnt NUMBER)),"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #"; one of player IDs"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 9 #"materials"
0 0 24 3 1 #" "
0 0 14 3 7 #"players"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; example cells"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-wood"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"cell-with-wood-player"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"player1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"cell-with-grass-player-down"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 12 #"player1-down"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"cell-with-water-player"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"player1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"cell-with-water-player-down"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 12 #"player1-down"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"cell-with-grass-player"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"player1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"cell-with-materials"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"cell-with-fewer-materials"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"player1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"cell-with-player2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"player2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-stuff"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"player1"
0 0 24 3 1 #" "
0 0 14 3 7 #"player2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"cell-with-player3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"player3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"cell-with-player4"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"player4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"cell-with-rock-water"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"cell-with-rock-materials"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"cell-with-tnt-player"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"tnt"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"player1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"cell-with-tnt"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"tnt"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-tnt-5"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"tnt"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; options for materials you can place"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"materials"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"tnt"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"tnt"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; a world is the player ID, current position, current material, and "
 #"a 2d collection of cells"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 9 #"player-id"
0 0 24 3 1 #" "
0 0 14 3 8 #"material"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; get-pos : list-of (list-of 'a) -> posn -> cell"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; get the 'a at the given x,y position in the 2d list. error if out "
 #"of bounds."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; tests for get-pos"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; set-pos : list-of (list-of 'a) -> poss -> 'a -> list-of (list-of '"
 #"a)"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; updates the element at the given x,y position in the 2d list. erro"
 #"r if out of bounds."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"set-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"list-set"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-set"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; tests for set-pos"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"set-pos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"set-pos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"9"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; find-list : list-of 'a -> ('a -> number -> 'b or #f) -> 'b or #f"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; finds the first index of the list that returns non-#f for a given "
 #"predicate,"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #"; and returns that value."
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; if no value returns 'b, then returns #f"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"find-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 2 #"f?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" (("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"find-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 2 #"f?"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 2 #"f?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 1 #"i"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 11 #"find-helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 2 #"f?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 6 #"])))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"find-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 2 #"f?"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"find-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"hello\""
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))) "
0 0 19 3 7 #"\"hello\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"find-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"find-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"find-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; find-pos : list-of (list-of 'a) -> ('a -> bool) -> posn"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #"; finds the first x,y position in given 2d list that returns true to"
 #" given predicate."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"find-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 9 #"find-list"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-pos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #")) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-pos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #")) ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; example worlds"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 2 #") "
0 0 14 3 10 #"empty-cell"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 21 #"cell-with-wood-player"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"small-world-moved2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-wood"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 27 #"cell-with-grass-player-down"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"small-world-moved"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-wood"
0 0 24 3 1 #" "
0 0 14 3 22 #"cell-with-water-player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"small-world-moved*"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-wood"
0 0 24 3 1 #" "
0 0 14 3 27 #"cell-with-water-player-down"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"crowded-world"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 17 #"cell-with-player3"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-stuff"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 17 #"cell-with-player4"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 13 #"cell-with-tnt"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"small-world-water-smashed"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 21 #"cell-with-wood-player"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"small-world-stacked"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 21 #"cell-with-wood-player"
0 0 24 3 1 #" "
0 0 14 3 19 #"cell-with-materials"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"small-world-stacked-smashed"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 21 #"cell-with-wood-player"
0 0 24 3 1 #" "
0 0 14 3 25 #"cell-with-fewer-materials"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; color constants"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"wood-color"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"SaddleBrown\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"water-color"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"DodgerBlue\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"rock-color"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"DimGray\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"grass-color"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"ForestGreen\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"tnt-color"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"Firebrick\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; is-tnt? : material -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; checks if the material is tnt"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-tnt?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"tnt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-tnt?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"tnt"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-tnt?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; render-tnt : width -> height -> small-size -> large-size -> materi"
 #"al -> image"
) 0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #"; renders a square with text, where the text is large size if second"
 #"s < 100, small-size if >100"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"render-tnt"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 2 #"sm"
0 0 24 3 1 #" "
0 0 14 3 2 #"la"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"crop"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"overlay/align"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"middle\""
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                             "
0 0 14 3 2 #"sm"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                             "
0 0 14 3 2 #"la"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 19 3 6 #"\"Gold\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 9 #"tnt-color"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; render-cell : string -> cell -> image"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; renders a single cell, displaying the top-most material as a color"
 #"ed square and"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(
 #"; the player IDs as lines around it. The current player id (given as"
 #" first argument), if"
) 0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #"; present, will be a line around the entire square, whereas the rest"
 #" will be vertical lines"
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #"; along the left side."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"render-cell"
0 0 24 3 1 #" "
0 0 14 3 3 #"pid"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 12 #"left-padding"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 10 #"is-active?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pid"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 9 #"player-id"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 13 #"other-padding"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 10 #"is-active?"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 12 #"top-material"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 5 #"color"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"top-material"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"empty"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"White\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"top-material"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 2 #") "
0 0 14 3 10 #"rock-color"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"top-material"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 2 #") "
0 0 14 3 11 #"water-color"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"top-material"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 2 #") "
0 0 14 3 11 #"grass-color"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"top-material"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 2 #") "
0 0 14 3 10 #"wood-color"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 7 #"is-tnt?"
0 0 24 3 1 #" "
0 0 14 3 12 #"top-material"
0 0 24 3 2 #") "
0 0 14 3 9 #"tnt-color"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 5 #"width"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 14 3 12 #"left-padding"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-padding"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 6 #"height"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-padding"
0 0 24 3 1 #" "
0 0 14 3 13 #"other-padding"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 11 #"left-border"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 10 #"is-active?"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Red\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 12 #"right-border"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 10 #"is-active?"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Red\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"list"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 6 #"strips"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 3 #") ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Gold\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"pid"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 9 #"player-id"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 6 #"middle"
0 0 24 3 2 #" ("
0 0 14 3 7 #"beside*"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 11 #"left-border"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 6 #"strips"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-tnt?"
0 0 24 3 1 #" "
0 0 14 3 12 #"top-material"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"render-tnt"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 14 3 12 #"top-material"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 12 #"right-border"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"overlay"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 10 #"is-active?"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"above"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Red\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 6 #"middle"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Red\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 6 #"middle"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"LightGray\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; tests for render-cell"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"render-cell"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 2 #") "
0 6           4 21 496
(
 #"(#(struct:overlay #(struct:translate 1 1 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 15 0 0 0) #(struct:pulled-point 0 0 15 15 0 0) #(struct:pulle"
 #"d-point 0 0 0 15 0 0)) 255 \"White\"))) #(struct:translate 0 0 #(str"
 #"uct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 "
 #"0) #(struct:pulled-point 0 0 17 0 0 0) #(struct:pulled-point 0 0 17 "
 #"17 0 0) #(struct:pulled-point 0 0 0 17 0 0)) 255 \"LightGray\")))) #"
 #"(struct:bb 17 17 17) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"render-cell"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 2 #") "
0 6           4 21 1546
(
 #"(#(struct:overlay #(struct:translate 1 1 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:transl"
 #"ate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 15 0 0 0) #(struct:pulled-point 0 0 15 2 0 0) #(s"
 #"truct:pulled-point 0 0 0 2 0 0)) 255 \"Red\"))) #(struct:translate 0"
 #" 2 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 2 0 0 0) #(struct:p"
 #"ulled-point 0 0 2 11 0 0) #(struct"
 #":pulled-point 0 0 0 11 0 0)) 255 \"Red\"))) #(struct:translate 2 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 11 0 0 0) #(struct:pulled-point 0 0"
 #" 11 11 0 0) #(struct:pulled-point 0 0 0 11 0 0)) 255 \"White\"))))) "
 #"#(struct:translate 13 0 #(struct:translate 0 0 #(struct:polygon (#(s"
 #"truct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 2 0 0 0) #"
 #"(struct:pulled-point 0 0 2 11 0 0) #(struct:pulled-point 0 0 0 11 0 "
 #"0)) 255 \"Red\"))))))) #(struct:translate 0 13 #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pull"
 #"ed-point 0 0 15 0 0 0) #(struct:pulled-point 0 0 15 2 0 0) #(struct:"
 #"pulled-point 0 0 0 2 0 0)) 255 \"Red\"))))) #(struct:translate 0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 17 0 0 0) #(struct:pulled-point 0 0"
 #" 17 17 0 0) #(struct:pulled-point 0 0 0 17 0 0)) 255 \"LightGray\"))"
 #")) #(struct:bb 17 17 17) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"render-cell"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 2 #") "
0 6           4 21 498
(
 #"(#(struct:overlay #(struct:translate 1 1 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 15 0 0 0) #(struct:pulled-point 0 0 15 15 0 0) #(struct:pulle"
 #"d-point 0 0 0 15 0 0)) 255 \"DimGray\"))) #(struct:translate 0 0 #(s"
 #"truct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 "
 #"0 0) #(struct:pulled-point 0 0 17 0 0 0) #(struct:pulled-point 0 0 1"
 #"7 17 0 0) #(struct:pulled-point 0 0 0 17 0 0)) 255 \"LightGray\"))))"
 #" #(struct:bb 17 17 17) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"render-cell"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 2 #") "
0 6           4 21 501
(
 #"(#(struct:overlay #(struct:translate 1 1 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 15 0 0 0) #(struct:pulled-point 0 0 15 15 0 0) #(struct:pulle"
 #"d-point 0 0 0 15 0 0)) 255 \"DodgerBlue\"))) #(struct:translate 0 0 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 17 0 0 0) #(struct:pulled-point 0 "
 #"0 17 17 0 0) #(struct:pulled-point 0 0 0 17 0 0)) 255 \"LightGray\")"
 #"))) #(struct:bb 17 17 17) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"render-cell"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 19 #"cell-with-materials"
0 0 24 3 2 #") "
0 6           4 21 502
(
 #"(#(struct:overlay #(struct:translate 1 1 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 15 0 0 0) #(struct:pulled-point 0 0 15 15 0 0) #(struct:pulle"
 #"d-point 0 0 0 15 0 0)) 255 \"ForestGreen\"))) #(struct:translate 0 0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 17 0 0 0) #(struct:pulled-point 0"
 #" 0 17 17 0 0) #(struct:pulled-point 0 0 0 17 0 0)) 255 \"LightGray\""
 #")))) #(struct:bb 17 17 17) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"render-cell"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-stuff"
0 0 24 3 2 #") "
0 6           4 21 1809
(
 #"(#(struct:overlay #(struct:translate 1 1 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:transl"
 #"ate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 15 0 0 0) #(struct:pulled-point 0 0 15 2 0 0) #(s"
 #"truct:pulled-point 0 0 0 2 0 0)) 255 \"Red\"))) #(struct:translate 0"
 #" 2 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:tran"
 #"slate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(str"
 #"uct:pulled-point 0 0 2 0 0 0) #(struct:pulled-point 0 0 2 11 0 0) #("
 #"struct:pulled-point 0 0 0 11 0 0)) 255 \"Red\"))) #(struct:translate"
 #" 2 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 2 0 0 0) #(struct:pulled-poin"
 #"t 0 0 2 11 0 0) #(struct:pulled-point 0 0 0 11 0 0)) 255 \"Gold\")))"
 #")) #(struct:translate 4 0 #(struct:translate 0 0 #(struct:polygon (#"
 #"(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 9 0 0 0)"
 #" #(struct:pulled-point 0 0 9 11 0 0) #(struct:pulled-point 0 0 0 11 "
 #"0 0)) 255 \"DimGray\"))))) #(struct:translate 13 0 #(struct:translat"
 #"e 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:"
 #"pulled-point 0 0 2 0 0 0) #(struct:pulled-point 0 0 2 11 0 0) #(stru"
 #"ct:pulled-point 0 0 0 11 0 0)) 255 \"Red\"))))))) #(struct:translate"
 #" 0 13 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point"
 #" 0 0 0 0 0 0) #(struct:pulled-point 0 0 15 0 0 0) #(struct:pulled-po"
 #"int 0 0 15 2 0 0) #(struct:pulled-point 0 0 0 2 0 0)) 255 \"Red\")))"
 #")) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#"
 #"(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 17 0 0 0"
 #") #(struct:pulled-point 0 0 17 17 0 0) #(struct:pulled-point 0 0 0 1"
 #"7 0 0)) 255 \"LightGray\")))) #(struct:bb 17 17 17) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"render-cell"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 21 #"cell-with-wood-player"
0 0 24 3 2 #") "
0 6           4 21 1552
(
 #"(#(struct:overlay #(struct:translate 1 1 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:transl"
 #"ate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 15 0 0 0) #(struct:pulled-point 0 0 15 2 0 0) #(s"
 #"truct:pulled-point 0 0 0 2 0 0)) 255 \"Red\"))) #(struct:translate 0"
 #" 2 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 2 0 0 0) #(struct:p"
 #"ulled-point 0 0 2 11 0 0) #(struct"
 #":pulled-point 0 0 0 11 0 0)) 255 \"Red\"))) #(struct:translate 2 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 11 0 0 0) #(struct:pulled-point 0 0"
 #" 11 11 0 0) #(struct:pulled-point 0 0 0 11 0 0)) 255 \"SaddleBrown\""
 #"))))) #(struct:translate 13 0 #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 2 0 "
 #"0 0) #(struct:pulled-point 0 0 2 11 0 0) #(struct:pulled-point 0 0 0"
 #" 11 0 0)) 255 \"Red\"))))))) #(struct:translate 0 13 #(struct:transl"
 #"ate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 15 0 0 0) #(struct:pulled-point 0 0 15 2 0 0) #(s"
 #"truct:pulled-point 0 0 0 2 0 0)) 255 \"Red\"))))) #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 17 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 17 17 0 0) #(struct:pulled-point 0 0 0 17 0 0)) 255 \"LightGr"
 #"ay\")))) #(struct:bb 17 17 17) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"render-cell"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 13 #"cell-with-tnt"
0 0 24 3 2 #") "
0 6           4 21 820
(
 #"(#(struct:overlay #(struct:crop (#(struct:point 1 1) #(struct:point "
 #"16 1) #(struct:point 16 16) #(struct:point 1 16)) #(struct:overlay #"
 #"(struct:overlay #(struct:overlay #(struct:translate 3.0 8.5 #(struct"
 #":text \"3\" 0 1 \"Gold\" 8 #f swiss normal normal #f)) #(struct:tran"
 #"slate 7.0 8.5 #(struct:text \"0\" 0 1 \"Gold\" 8 #f swiss normal nor"
 #"mal #f))) #(struct:translate 11.0 8.5 #(struct:text \"0\" 0 1 \"Gold"
 #"\" 8 #f swiss normal normal #f))) #(struct:polygon (#(struct:pulled-"
 #"point 0 0 1 1 0 0) #(struct:pulled-point 0 0 16 1 0 0) #(struct:pull"
 #"ed-point 0 0 16 16 0 0) #(struct:pulled-point 0 0 1 16 0 0)) 255 \"F"
 #"irebrick\"))) #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 17 0 0 0) #(struct:pulled-point 0 0 17 17 0"
 #" 0) #(struct:pulled-point 0 0 0 17 0 0)) 255 \"LightGray\")) #(struc"
 #"t:bb 17 17 17.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"render-cell"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 20 #"cell-with-tnt-player"
0 0 24 3 2 #") "
0 6           4 21 1588
(
 #"(#(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:polygon (#(struct:pulled-point 0 0 1 1 0 "
 #"0) #(struct:pulled-point 0 0 16 1 0 0) #(struct:pulled-point 0 0 16 "
 #"3 0 0) #(struct:pulled-point 0 0 1 3 0 0)) 255 \"Red\") #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 1 3 0 0) #(struct:pulled-point 0 0 3"
 #" 3 0 0) #(struct:pulled-point 0 0 3 14 0 0) #(struct:pulled-point 0 "
 #"0 1 14 0 0)) 255 \"Red\")) #(struct:crop (#(struct:point 3 3) #(stru"
 #"ct:point 14 3) #(struct:point 14 14) #(struct:point 3 14)) #(struct:"
 #"overlay #(struct:overlay #(struct:overlay #(struct:translate 5.0 8.5"
 #" #(struct:text \"3\" 0 1 \"Gold\" 8 #f swiss normal normal #f)) #(st"
 #"ruct:translate 9.0 8.5 #(struct:text \"0\" 0 1 \"Gold\" 8 #f swiss n"
 #"ormal normal #f))) #(struct:translate 13.0 8.5 #(struct:text \"0\" 0"
 #" 1 \"Gold\" 8 #f swiss normal normal #f))) #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 3 3 0 0) #(struct:pulled-point 0 0 14 3 0 0) #(st"
 #"ruct:pulled-point 0 0 14 14 0 0) #(struct:pulled-point 0 0 3 14 0 0)"
 #") 255 \"Firebrick\")))) #(struct:polygon (#(struct:pulled-point 0 0 "
 #"14 3 0 0) #(struct:pulled-point 0 0 16 3 0 0) #(struct:pulled-point "
 #"0 0 16 14 0 0) #(struct:pulled-point 0 0 14 14 0 0)) 255 \"Red\")) #"
 #"(struct:polygon (#(struct:pulled-point 0 0 1 14 0 0) #(struct:pulled"
 #"-point 0 0 16 14 0 0) #(struct:pulled-point 0 0 16 16 0 0) #(struct:"
 #"pulled-point 0 0 1 16 0 0)) 255 \"Red\")) #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 17 0 0 0) #(str"
 #"uct:pulled-point 0 0 17 17 0 0) #(struct:pulled-point 0 0 0 17 0 0))"
 #" 255 \"LightGray\")) #(struct:bb 17 17 17.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; has-player? : cell -> ID -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; checks if a given cell has a given player on it"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"has-player?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 9 #"player-id"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"has-player?"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"has-player?"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player2\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; has-material? : cell -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; checks if there are any materials on the cell"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"has-material?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"has-material?"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"has-material?"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"has-material?"
0 0 24 3 1 #" "
0 0 14 3 19 #"cell-with-materials"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"has-material?"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-stuff"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"has-material?"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; has-rock? : cell -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; checks if there is any rock on the cell"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"has-rock?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"has-rock?"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"has-rock?"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"has-rock?"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; has-water? : cell -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; checks if theer is any mater on the cell"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"has-water?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 4 #")) ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"has-water?"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"has-water?"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"has-water?"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; render-world : world -> image"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; renders a world, showing the map of cells"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 6 #"player"
0 0 24 3 2 #" ("
0 0 14 3 11 #"find-player"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 8 #"below-me"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 16 #"orientation-posn"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 6 #")))])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 14 #"material-color"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 2 #") "
0 0 14 3 10 #"wood-color"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                           [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 2 #") "
0 0 14 3 10 #"rock-color"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                           [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 2 #") "
0 0 14 3 11 #"water-color"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                           [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 2 #") "
0 0 14 3 11 #"grass-color"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                           [("
0 0 14 3 7 #"is-tnt?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 14 3 9 #"tnt-color"
0 0 24 3 5 #"]))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"beside/align"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"above"
0 0 24 3 2 #" ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-tnt?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 10 #"render-tnt"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"material-color"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"35"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 6 #"above*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-tnt?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 10 #"render-tnt"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"material-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                           ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"transparent\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 8 #"below-me"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"above*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 7 #"beside*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 11 #"render-cell"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 1 #"c"
0 0 24 3 3 #")) "
0 0 14 3 3 #"row"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; tests for render-world"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 7243
(
 #"(#(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:polygon"
 #" (#(struct:pulled-point 0 0 5/2 5/2 0 0) #(struct:pulled-point 0 0 6"
 #"5/2 5/2 0 0) #(struct:pulled-point 0 0 65/2 65/2 0 0) #(struct:pulle"
 #"d-point 0 0 5/2 65/2 0 0)) 255 \"SaddleBrown\") #(struct:polygon (#("
 #"struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 35 0 0 0)"
 #" #(struct:pulled-point 0 0 35 35 0 0) #(struct:pulled-point 0 0 0 35"
 #" 0 0)) 255 \"transparent\")) #(struct:polygon (#(struct:pulled-point"
 #" 0 0 25/2 35 0 0) #(struct:pulled-point 0 0 45/2 35 0 0) #(struct:pu"
 #"lled-point 0 0 45/2 45 0 0) #(struct:pulled-point 0 0 25/2 45 0 0)) "
 #"255 \"transparent\")) #(struct:polygon (#(struct:pulled-point 0 0 35"
 #"/2 45 0 0) #(struct:pulled-point 0 0 35/2 45 0 0) #(struct:pulled-po"
 #"int 0 0 35/2 45 0 0) #(struct:pulled-point 0 0 35/2 45 0 0)) 255 \"b"
 #"lack\")) #(struct:polygon (#(struct:pulled-point 0 0 36 1 0 0) #(str"
 #"uct:pulled-point 0 0 51 1 0 0) #(struct:pulled-point 0 0 51 16 0 0) "
 #"#(struct:pulled-point 0 0 36 16 0 0)) 255 \"White\")) #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 35 0 0 0) #(struct:pulled-point 0 0 52"
 #" 0 0 0) #(struct:pulled-point 0 0 52 17 0 0) #(struct:pulled-point 0"
 #" 0 35 17 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled"
 #"-point 0 0 53 1 0 0) #(struct:pulled-point 0 0 68 1 0 0) #(struct:pu"
 #"lled-point 0 0 68 16 0 0) #(struct:pulled-point 0 0 53 16 0 0)) 255 "
 #"\"White\")) #(struct:polygon (#(struct:pulled-point 0 0 52 0 0 0) #("
 #"struct:pulled-point 0 0 69 0 0 0) #(struct:pulled-point 0 0 69 17 0 "
 #"0) #(struct:pulled-point 0 0 52 17 0 0)) 255 \"LightGray\")) #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 70 1 0 0) #(struct:pulled-point"
 #" 0 0 85 1 0 0) #(struct:pulled-point 0 0 85 16 0 0) #(struct:pulled-"
 #"point 0 0 70 16 0 0)) 255 \"White\")) #(struct:polygon (#(struct:pul"
 #"led-point 0 0 69 0 0 0) #(struct:pulled-point 0 0 86 0 0 0) #(struct"
 #":pulled-point 0 0 86 17 0 0) #(struct:pulled-point 0 0 69 17 0 0)) 2"
 #"55 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 87 1 "
 #"0 0) #(struct:pulled-point 0 0 102 1 0 0) #(struct:pulled-point 0 0 "
 #"102 16 0 0) #(struct:pulled-point 0 0 87 16 0 0)) 255 \"White\")) #("
 #"struct:polygon (#(struct:pulled-point 0 0 86 0 0 0) #(struct:pulled-"
 #"point 0 0 103 0 0 0) #(struct:pulled-point 0 0 103 17 0 0) #(struct:"
 #"pulled-point 0 0 86 17 0 0)) 255 \"LightGray\")) #(struct:polygon (#"
 #"(struct:pulled-point 0 0 36 18 0 0) #(struct:pulled-point 0 0 51 18 "
 #"0 0) #(struct:pulled-point 0 0 51 33 0 0) #(struct:pulled-point 0 0 "
 #"36 33 0 0)) 255 \"White\")) #(struct:polygon (#(struct:pulled-point "
 #"0 0 35 17 0 0) #(struct:pulled-point 0 0 52 17 0 0) #(struct:pulled-"
 #"point 0 0 52 34 0 0) #(struct:pulled-point 0 0 35 34 0 0)) 255 \"Lig"
 #"htGray\")) #(struct:polygon (#(struct:pulled-point 0 0 53 18 0 0) #("
 #"struct:pulled-point 0 0 68 18 0 0) #(struct:pulled-point 0 0 68 33 0"
 #" 0) #(struct:pulled-point 0 0 53 33 0 0)) 255 \"White\")) #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 52 17 0 0) #(struct:pulled-point 0"
 #" 0 69 17 0 0) #(struct:pulled-point 0 0 69 34 0 0) #(struct:pulled-p"
 #"oint 0 0 52 34 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:"
 #"pulled-point 0 0 70 18 0 0) #(struct:pulled-point 0 0 85 18 0 0) #(s"
 #"truct:pulled-point 0 0 85 33 0 0) #(struct:pulled-point 0 0 70 33 0 "
 #"0)) 255 \"White\")) #(struct:polygon (#(struct:pulled-point 0 0 69 1"
 #"7 0 0) #(struct:pulled-point 0 0 86 17 0 0) #(struct:pulled-point 0 "
 #"0 86 34 0 0) #(struct:pulled-point 0 0 69 34 0 0)) 255 \"LightGray\""
 #")) #(struct:polygon (#(struct:pulled-point 0 0 87 18 0 0) #(struct:p"
 #"ulled-point 0 0 102 18 0 0) #(struct:pulled-point 0 0 102 33 0 0) #("
 #"struct:pulled-point 0 0 87 33 0 0)) 255 \"White\")) #(struct:polygon"
 #" (#(struct:pulled-point 0 0 86 17 0 0) #(struct:pulled-point 0 0 103"
 #" 17 0 0) #(struct:pulled-point 0 0 103 34 0 0) #(struct:pulled-point"
 #" 0 0 86 34 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 36 35 0 0) #(struct:pulled-point 0 0 51 35 0 0) #(struc"
 #"t:pulled-point 0 0 51 50 0 0) #(struct:pulled-point 0 0 36 50 0 0)) "
 #"255 \"White\")) #(struct:polygon (#(struct:pulled-point 0 0 35 34 0 "
 #"0) #(struct:pulled-point 0 0 52 34 0 0) #(struct:pulled-point 0 0 52"
 #" 51 0 0) #(struct:pulled-point 0 0 35 51 0 0)) 255 \"LightGray\")) #"
 #"(struct:polygon (#(struct:pulled-point 0 0 53 35 0 0) #(struct:pulle"
 #"d-point 0 0 68 35 0 0) #(struct:pulled-point 0 0 68 50 0 0) #(struct"
 #":pulled-point 0 0 53 50 0 0)) 255 \"White\")) #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 52 34 0 0) #(struct:pulled-point 0 0 69 34 0 0"
 #") #(struct:pulled-point 0 0 69 51 0 0) #(struct:pulled-point 0 0 52 "
 #"51 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point"
 #" 0 0 70 35 0 0) #(struct:pulled-point 0 0 85 35 0 0) #(struct:pulled"
 #"-point 0 0 85 50 0 0) #(struct:pulled-point 0 0 70 50 0 0)) 255 \"Wh"
 #"ite\")) #(struct:polygon (#(struct:pulled-point 0 0 69 34 0 0) #(str"
 #"uct:pulled-point 0 0 86 34 0 0) #(struct:pulled-point 0 0 86 51 0 0)"
 #" #(struct:pulled-point 0 0 69 51 0 0)) 255 \"LightGray\")) #(struct:"
 #"polygon (#(struct:pulled-point 0 0 87 35 0 0) #(struct:pulled-point "
 #"0 0 102 35 0 0) #(struct:pulled-point 0 0 102 50 0 0) #(struct:pulle"
 #"d-point 0 0 87 50 0 0)) 255 \"White\")) #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 86 34 0 0) #(struct:pulled-point 0 0 103 34 0 0) #(s"
 #"truct:pulled-point 0 0 103 51 0 0) #(struct:pulled-point 0 0 86 51 0"
 #" 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0"
 #" 36 52 0 0) #(struct:pulled-point 0 0 51 52 0 0) #(struct:pulled-poi"
 #"nt 0 0 51 67 0 0) #(struct:pulled"
 #"-point 0 0 36 67 0 0)) 255 \"White\")) #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 35 51 0 0) #(struct:pulled-point 0 0 52 51 0 0) #(str"
 #"uct:pulled-point 0 0 52 68 0 0) #(struct:pulled-point 0 0 35 68 0 0)"
 #") 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 53"
 #" 52 0 0) #(struct:pulled-point 0 0 68 52 0 0) #(struct:pulled-point "
 #"0 0 68 67 0 0) #(struct:pulled-point 0 0 53 67 0 0)) 255 \"White\"))"
 #" #(struct:polygon (#(struct:pulled-point 0 0 52 51 0 0) #(struct:pul"
 #"led-point 0 0 69 51 0 0) #(struct:pulled-point 0 0 69 68 0 0) #(stru"
 #"ct:pulled-point 0 0 52 68 0 0)) 255 \"LightGray\")) #(struct:polygon"
 #" (#(struct:pulled-point 0 0 70 52 0 0) #(struct:pulled-point 0 0 85 "
 #"52 0 0) #(struct:pulled-point 0 0 85 67 0 0) #(struct:pulled-point 0"
 #" 0 70 67 0 0)) 255 \"White\")) #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 69 51 0 0) #(struct:pulled-point 0 0 86 51 0 0) #(struct:pull"
 #"ed-point 0 0 86 68 0 0) #(struct:pulled-point 0 0 69 68 0 0)) 255 \""
 #"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 87 52 0 0)"
 #" #(struct:pulled-point 0 0 102 52 0 0) #(struct:pulled-point 0 0 102"
 #" 67 0 0) #(struct:pulled-point 0 0 87 67 0 0)) 255 \"White\")) #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 86 51 0 0) #(struct:pulled-po"
 #"int 0 0 103 51 0 0) #(struct:pulled-point 0 0 103 68 0 0) #(struct:p"
 #"ulled-point 0 0 86 68 0 0)) 255 \"LightGray\")) #(struct:bb 103 68 6"
 #"8) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 8297
(
 #"(#(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:polygon (#(struct:pulled-point 0 0 5/2 5/2 0 0) #(struct:p"
 #"ulled-point 0 0 65/2 5/2 0 0) #(struct:pulled-point 0 0 65/2 65/2 0 "
 #"0) #(struct:pulled-point 0 0 5/2 65/2 0 0)) 255 \"SaddleBrown\") #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 35 0 0 0) #(struct:pulled-point 0 0 35 35 0 0) #(struct:pull"
 #"ed-point 0 0 0 35 0 0)) 255 \"transparent\")) #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 25/2 35 0 0) #(struct:pulled-point 0 0 45/2 35"
 #" 0 0) #(struct:pulled-point 0 0 45/2 45 0 0) #(struct:pulled-point 0"
 #" 0 25/2 45 0 0)) 255 \"transparent\")) #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 10 95/2 0 0) #(struct:pulled-point 0 0 25 95/2 0 0) #"
 #"(struct:pulled-point 0 0 25 125/2 0 0) #(struct:pulled-point 0 0 10 "
 #"125/2 0 0)) 255 \"SaddleBrown\")) #(struct:polygon (#(struct:pulled-"
 #"point 0 0 15/2 45 0 0) #(struct:pulled-point 0 0 55/2 45 0 0) #(stru"
 #"ct:pulled-point 0 0 55/2 65 0 0) #(struct:pulled-point 0 0 15/2 65 0"
 #" 0)) 255 \"transparent\")) #(struct:polygon (#(struct:pulled-point 0"
 #" 0 36 1 0 0) #(struct:pulled-point 0 0 51 1 0 0) #(struct:pulled-poi"
 #"nt 0 0 51 16 0 0) #(struct:pulled"
 #"-point 0 0 36 16 0 0)) 255 \"White\")) #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 35 0 0 0) #(struct:pulled-point 0 0 52 0 0 0) #(struc"
 #"t:pulled-point 0 0 52 17 0 0) #(struct:pulled-point 0 0 35 17 0 0)) "
 #"255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 53 1"
 #" 0 0) #(struct:pulled-point 0 0 68 1 0 0) #(struct:pulled-point 0 0 "
 #"68 16 0 0) #(struct:pulled-point 0 0 53 16 0 0)) 255 \"White\")) #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 52 0 0 0) #(struct:pulled-p"
 #"oint 0 0 69 0 0 0) #(struct:pulled-point 0 0 69 17 0 0) #(struct:pul"
 #"led-point 0 0 52 17 0 0)) 255 \"LightGray\")) #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 70 1 0 0) #(struct:pulled-point 0 0 85 1 0 0) "
 #"#(struct:pulled-point 0 0 85 3 0 0) #(struct:pulled-point 0 0 70 3 0"
 #" 0)) 255 \"Red\")) #(struct:polygon (#(struct:pulled-point 0 0 70 3 "
 #"0 0) #(struct:pulled-point 0 0 72 3 0 0) #(struct:pulled-point 0 0 7"
 #"2 14 0 0) #(struct:pulled-point 0 0 70 14 0 0)) 255 \"Red\")) #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 72 3 0 0) #(struct:pulled-poin"
 #"t 0 0 83 3 0 0) #(struct:pulled-point 0 0 83 14 0 0) #(struct:pulled"
 #"-point 0 0 72 14 0 0)) 255 \"SaddleBrown\")) #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 83 3 0 0) #(struct:pulled-point 0 0 85 3 0 0) #"
 #"(struct:pulled-point 0 0 85 14 0 0) #(struct:pulled-point 0 0 83 14 "
 #"0 0)) 255 \"Red\")) #(struct:polygon (#(struct:pulled-point 0 0 70 1"
 #"4 0 0) #(struct:pulled-point 0 0 85 14 0 0) #(struct:pulled-point 0 "
 #"0 85 16 0 0) #(struct:pulled-point 0 0 70 16 0 0)) 255 \"Red\")) #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 69 0 0 0) #(struct:pulled-p"
 #"oint 0 0 86 0 0 0) #(struct:pulled-point 0 0 86 17 0 0) #(struct:pul"
 #"led-point 0 0 69 17 0 0)) 255 \"LightGray\")) #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 87 1 0 0) #(struct:pulled-point 0 0 102 1 0 0)"
 #" #(struct:pulled-point 0 0 102 16 0 0) #(struct:pulled-point 0 0 87 "
 #"16 0 0)) 255 \"DodgerBlue\")) #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 86 0 0 0) #(struct:pulled-point 0 0 103 0 0 0) #(struct:pulled"
 #"-point 0 0 103 17 0 0) #(struct:pulled-point 0 0 86 17 0 0)) 255 \"L"
 #"ightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 36 18 0 0) "
 #"#(struct:pulled-point 0 0 51 18 0 0) #(struct:pulled-point 0 0 51 33"
 #" 0 0) #(struct:pulled-point 0 0 36 33 0 0)) 255 \"DodgerBlue\")) #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 35 17 0 0) #(struct:pulled-"
 #"point 0 0 52 17 0 0) #(struct:pulled-point 0 0 52 34 0 0) #(struct:p"
 #"ulled-point 0 0 35 34 0 0)) 255 \"LightGray\")) #(struct:polygon (#("
 #"struct:pulled-point 0 0 53 18 0 0) #(struct:pulled-point 0 0 68 18 0"
 #" 0) #(struct:pulled-point 0 0 68 33 0 0) #(struct:pulled-point 0 0 5"
 #"3 33 0 0)) 255 \"DimGray\")) #(struct:polygon (#(struct:pulled-point"
 #" 0 0 52 17 0 0) #(struct:pulled-point 0 0 69 17 0 0) #(struct:pulled"
 #"-point 0 0 69 34 0 0) #(struct:pulled-point 0 0 52 34 0 0)) 255 \"Li"
 #"ghtGray\")) #(struct:polygon (#(struct:pulled-point 0 0 70 18 0 0) #"
 #"(struct:pulled-point 0 0 85 18 0 0) #(struct:pulled-point 0 0 85 33 "
 #"0 0) #(struct:pulled-point 0 0 70 33 0 0)) 255 \"ForestGreen\")) #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 69 17 0 0) #(struct:pulled-"
 #"point 0 0 86 17 0 0) #(struct:pulled-point 0 0 86 34 0 0) #(struct:p"
 #"ulled-point 0 0 69 34 0 0)) 255 \"LightGray\")) #(struct:polygon (#("
 #"struct:pulled-point 0 0 87 18 0 0) #(struct:pulled-point 0 0 102 18 "
 #"0 0) #(struct:pulled-point 0 0 102 33 0 0) #(struct:pulled-point 0 0"
 #" 87 33 0 0)) 255 \"DimGray\")) #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 86 17 0 0) #(struct:pulled-point 0 0 103 17 0 0) #(struct:pul"
 #"led-point 0 0 103 34 0 0) #(struct:pulled-point 0 0 86 34 0 0)) 255 "
 #"\"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 36 35 0 "
 #"0) #(struct:pulled-point 0 0 51 35 0 0) #(struct:pulled-point 0 0 51"
 #" 50 0 0) #(struct:pulled-point 0 0 36 50 0 0)) 255 \"ForestGreen\"))"
 #" #(struct:polygon (#(struct:pulled-point 0 0 35 34 0 0) #(struct:pul"
 #"led-point 0 0 52 34 0 0) #(struct:pulled-point 0 0 52 51 0 0) #(stru"
 #"ct:pulled-point 0 0 35 51 0 0)) 255 \"LightGray\")) #(struct:polygon"
 #" (#(struct:pulled-point 0 0 53 35 0 0) #(struct:pulled-point 0 0 68 "
 #"35 0 0) #(struct:pulled-point 0 0 68 50 0 0) #(struct:pulled-point 0"
 #" 0 53 50 0 0)) 255 \"DimGray\")) #(struct:polygon (#(struct:pulled-p"
 #"oint 0 0 52 34 0 0) #(struct:pulled-point 0 0 69 34 0 0) #(struct:pu"
 #"lled-point 0 0 69 51 0 0) #(struct:pulled-point 0 0 52 51 0 0)) 255 "
 #"\"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 70 35 0 "
 #"0) #(struct:pulled-point 0 0 85 35 0 0) #(struct:pulled-point 0 0 85"
 #" 50 0 0) #(struct:pulled-point 0 0 70 50 0 0)) 255 \"ForestGreen\"))"
 #" #(struct:polygon (#(struct:pulled-point 0 0 69 34 0 0) #(struct:pul"
 #"led-point 0 0 86 34 0 0) #(struct:pulled-point 0 0 86 51 0 0) #(stru"
 #"ct:pulled-point 0 0 69 51 0 0)) 255 \"LightGray\")) #(struct:polygon"
 #" (#(struct:pulled-point 0 0 87 35 0 0) #(struct:pulled-point 0 0 102"
 #" 35 0 0) #(struct:pulled-point 0 0 102 50 0 0) #(struct:pulled-point"
 #" 0 0 87 50 0 0)) 255 \"DimGray\")) #(struct:polygon (#(struct:pulled"
 #"-point 0 0 86 34 0 0) #(struct:pulled-point 0 0 103 34 0 0) #(struct"
 #":pulled-point 0 0 103 51 0 0) #(struct:pulled-point 0 0 86 51 0 0)) "
 #"255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 36 5"
 #"2 0 0) #(struct:pulled-point 0 0 51 52 0 0) #(struct:pulled-point 0 "
 #"0 51 67 0 0) #(struct:pulled-poin"
 #"t 0 0 36 67 0 0)) 255 \"DodgerBlue\")) #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 35 51 0 0) #(struct:pulled-point 0 0 52 51 0 0) #(str"
 #"uct:pulled-point 0 0 52 68 0 0) #(struct:pulled-point 0 0 35 68 0 0)"
 #") 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 53"
 #" 52 0 0) #(struct:pulled-point 0 0 68 52 0 0) #(struct:pulled-point "
 #"0 0 68 67 0 0) #(struct:pulled-point 0 0 53 67 0 0)) 255 \"White\"))"
 #" #(struct:polygon (#(struct:pulled-point 0 0 52 51 0 0) #(struct:pul"
 #"led-point 0 0 69 51 0 0) #(struct:pulled-point 0 0 69 68 0 0) #(stru"
 #"ct:pulled-point 0 0 52 68 0 0)) 255 \"LightGray\")) #(struct:polygon"
 #" (#(struct:pulled-point 0 0 70 52 0 0) #(struct:pulled-point 0 0 85 "
 #"52 0 0) #(struct:pulled-point 0 0 85 67 0 0) #(struct:pulled-point 0"
 #" 0 70 67 0 0)) 255 \"ForestGreen\")) #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 69 51 0 0) #(struct:pulled-point 0 0 86 51 0 0) #(struc"
 #"t:pulled-point 0 0 86 68 0 0) #(struct:pulled-point 0 0 69 68 0 0)) "
 #"255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 87 5"
 #"2 0 0) #(struct:pulled-point 0 0 102 52 0 0) #(struct:pulled-point 0"
 #" 0 102 67 0 0) #(struct:pulled-point 0 0 87 67 0 0)) 255 \"DodgerBlu"
 #"e\")) #(struct:polygon (#(struct:pulled-point 0 0 86 51 0 0) #(struc"
 #"t:pulled-point 0 0 103 51 0 0) #(struct:pulled-point 0 0 103 68 0 0)"
 #" #(struct:pulled-point 0 0 86 68 0 0)) 255 \"LightGray\")) #(struct:"
 #"bb 103 68 68) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 24 3 1 #" "
0 0 14 3 17 #"small-world-moved"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 8304
(
 #"(#(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:polygon (#(struct:pulled-point 0 0 5/2 5/2 0 0) #(struct:p"
 #"ulled-point 0 0 65/2 5/2 0 0) #(struct:pulled-point 0 0 65/2 65/2 0 "
 #"0) #(struct:pulled-point 0 0 5/2 65/2 0 0)) 255 \"SaddleBrown\") #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 35 0 0 0) #(struct:pulled-point 0 0 35 35 0 0) #(struct:pull"
 #"ed-point 0 0 0 35 0 0)) 255 \"transparent\")) #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 25/2 35 0 0) #(struct:pulled-point 0 0 45/2 35"
 #" 0 0) #(struct:pulled-point 0 0 45/2 45 0 0) #(struct:pulled-point 0"
 #" 0 25/2 45 0 0)) 255 \"transparent\")) #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 10 95/2 0 0) #(struct:pulled-point 0 0 25 95/2 0 0) #"
 #"(struct:pulled-point 0 0 25 125/2 0 0) #(struct:pulled-point 0 0 10 "
 #"125/2 0 0)) 255 \"DodgerBlue\")) #(struct:polygon (#(struct:pulled-p"
 #"oint 0 0 15/2 45 0 0) #(struct:pulled-point 0 0 55/2 45 0 0) #(struc"
 #"t:pulled-point 0 0 55/2 65 0 0) #(struct:pulled-point 0 0 15/2 65 0 "
 #"0)) 255 \"transparent\")) #(struct:polygon (#(struct:pulled-point 0 "
 #"0 36 1 0 0) #(struct:pulled-point 0 0 51 1 0 0) #(struct:pulled-poin"
 #"t 0 0 51 16 0 0) #(struct:pulled-point 0 0 36 16 0 0)) 255 \"White\""
 #")) #(struct:polygon (#(struct:pulled-point 0 0 35 0 0 0) #(struct:pu"
 #"lled-point 0 0 52 0 0 0) #(struct:pulled-point 0 0 52 17 0 0) #(stru"
 #"ct:pulled-point 0 0 35 17 0 0)) 255 \"LightGray\")) #(struct:polygon"
 #" (#(struct:pulled-point 0 0 53 1 0 0) #(struct:pulled-point 0 0 68 1"
 #" 0 0) #(struct:pulled-point 0 0 68 16 0 0) #(struct:pulled-point 0 0"
 #" 53 16 0 0)) 255 \"White\")) #(struct:polygon (#(struct:pulled-point"
 #" 0 0 52 0 0 0) #(struct:pulled-point 0 0 69 0 0 0) #(struct:pulled-p"
 #"oint 0 0 69 17 0 0) #(struct:pulled-point 0 0 52 17 0 0)) 255 \"Ligh"
 #"tGray\")) #(struct:polygon (#(struct:pulled-point 0 0 70 1 0 0) #(st"
 #"ruct:pulled-point 0 0 85 1 0 0) #(struct:pulled-point 0 0 85 16 0 0)"
 #" #(struct:pulled-point 0 0 70 16 0 0)) 255 \"SaddleBrown\")) #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 69 0 0 0) #(struct:pulled-point"
 #" 0 0 86 0 0 0) #(struct:pulled-point 0 0 86 17 0 0) #(struct:pulled-"
 #"point 0 0 69 17 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struct"
 #":pulled-point 0 0 87 1 0 0) #(struct:pulled-point 0 0 102 1 0 0) #(s"
 #"truct:pulled-point 0 0 102 3 0 0) #(struct:pulled-point 0 0 87 3 0 0"
 #")) 255 \"Red\")) #(struct:polygon (#(struct:pulled-point 0 0 87 3 0 "
 #"0) #(struct:pulled-point 0 0 89 3 0 0) #(struct:pulled-point 0 0 89 "
 #"14 0 0) #(struct:pulled-point 0 0 87 14 0 0)) 255 \"Red\")) #(struct"
 #":polygon (#(struct:pulled-point 0 0 89 3 0 0) #(struct:pulled-point "
 #"0 0 100 3 0 0) #(struct:pulled-point 0 0 100 14 0 0) #(struct:pulled"
 #"-point 0 0 89 14 0 0)) 255 \"DodgerBlue\")) #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 100 3 0 0) #(struct:pulled-point 0 0 102 3 0 0) "
 #"#(struct:pulled-point 0 0 102 14 0 0) #(struct:pulled-point 0 0 100 "
 #"14 0 0)) 255 \"Red\")) #(struct:polygon (#(struct:pulled-point 0 0 8"
 #"7 14 0 0) #(struct:pulled-point 0 0 102 14 0 0) #(struct:pulled-poin"
 #"t 0 0 102 16 0 0) #(struct:pulled-point 0 0 87 16 0 0)) 255 \"Red\")"
 #") #(struct:polygon (#(struct:pulled-point 0 0 86 0 0 0) #(struct:pul"
 #"led-point 0 0 103 0 0 0) #(struct:pulled-point 0 0 103 17 0 0) #(str"
 #"uct:pulled-point 0 0 86 17 0 0)) 255 \"LightGray\")) #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 36 18 0 0) #(struct:pulled-point 0 0 51"
 #" 18 0 0) #(struct:pulled-point 0 0 51 33 0 0) #(struct:pulled-point "
 #"0 0 36 33 0 0)) 255 \"DodgerBlue\")) #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 35 17 0 0) #(struct:pulled-point 0 0 52 17 0 0) #(struc"
 #"t:pulled-point 0 0 52 34 0 0) #(struct:pulled-point 0 0 35 34 0 0)) "
 #"255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 53 1"
 #"8 0 0) #(struct:pulled-point 0 0 68 18 0 0) #(struct:pulled-point 0 "
 #"0 68 33 0 0) #(struct:pulled-point 0 0 53 33 0 0)) 255 \"DimGray\"))"
 #" #(struct:polygon (#(struct:pulled-point 0 0 52 17 0 0) #(struct:pul"
 #"led-point 0 0 69 17 0 0) #(struct:pulled-point 0 0 69 34 0 0) #(stru"
 #"ct:pulled-point 0 0 52 34 0 0)) 255 \"LightGray\")) #(struct:polygon"
 #" (#(struct:pulled-point 0 0 70 18 0 0) #(struct:pulled-point 0 0 85 "
 #"18 0 0) #(struct:pulled-point 0 0 85 33 0 0) #(struct:pulled-point 0"
 #" 0 70 33 0 0)) 255 \"ForestGreen\")) #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 69 17 0 0) #(struct:pulled-point 0 0 86 17 0 0) #(struc"
 #"t:pulled-point 0 0 86 34 0 0) #(struct:pulled-point 0 0 69 34 0 0)) "
 #"255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 87 1"
 #"8 0 0) #(struct:pulled-point 0 0 102 18 0 0) #(struct:pulled-point 0"
 #" 0 102 33 0 0) #(struct:pulled-point 0 0 87 33 0 0)) 255 \"DimGray\""
 #")) #(struct:polygon (#(struct:pulled-point 0 0 86 17 0 0) #(struct:p"
 #"ulled-point 0 0 103 17 0 0) #(struct:pulled-point 0 0 103 34 0 0) #("
 #"struct:pulled-point 0 0 86 34 0 0)) 255 \"LightGray\")) #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 36 35 0 0) #(struct:pulled-point 0 0"
 #" 51 35 0 0) #(struct:pulled-point 0 0 51 50 0 0) #(struct:pulled-poi"
 #"nt 0 0 36 50 0 0)) 255 \"ForestGreen\")) #(struct:polygon (#(struct:"
 #"pulled-point 0 0 35 34 0 0) #(struct:pulled-point 0 0 52 34 0 0) #(s"
 #"truct:pulled-point 0 0 52 51 0 0) #(struct:pulled-point 0 0 35 51 0 "
 #"0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 "
 #"53 35 0 0) #(struct:pulled-point 0 0 68 35 0 0) #(struct:pulled-poin"
 #"t 0 0 68 50 0 0) #(struct:pulled-point 0 0 53 50 0 0)) 255 \"DimGray"
 #"\")) #(struct:polygon (#(struct:pulled-point 0 0 52 34 0 0) #(struct"
 #":pulled-point 0 0 69 34 0 0) #(struct:pulled-point 0 0 69 51 0 0) #("
 #"struct:pulled-point 0 0 52 51 0 0)) 255 \"LightGray\")) #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 70 35 0 0) #(struct:pulled-point 0 0"
 #" 85 35 0 0) #(struct:pulled-point 0 0 85 50 0 0) #(struct:pulled-poi"
 #"nt 0 0 70 50 0 0)) 255 \"ForestGreen\")) #(struct:polygon (#(struct:"
 #"pulled-point 0 0 69 34 0 0) #(struct:pulled-point 0 0 86 34 0 0) #(s"
 #"truct:pulled-point 0 0 86 51 0 0) #(struct:pulled-point 0 0 69 51 0 "
 #"0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 "
 #"87 35 0 0) #(struct:pulled-point 0 0 102 35 0 0) #(struct:pulled-poi"
 #"nt 0 0 102 50 0 0) #(struct:pulled-point 0 0 87 50 0 0)) 255 \"DimGr"
 #"ay\")) #(struct:polygon (#(struct:pulled-point 0 0 86 34 0 0) #(stru"
 #"ct:pulled-point 0 0 103 34 0 0) #(struct:pulled-point 0 0 103 51 0 0"
 #") #(struct:pulled-point 0 0 86 51 0 0)) 255 \"LightGray\")) #(struct"
 #":polygon (#(struct:pulled-point 0 0 36 52 0 0) #(struct:pulled-point"
 #" 0 0 51 52 0 0) #(struct:pulled-point 0 0 51 67 0 0) #(struct:pulled"
 #"-point 0 0 36 67 0 0)) 255 \"DodgerBlue\")) #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 35 51 0 0) #(struct:pulled-point 0 0 52 51 0 0) "
 #"#(struct:pulled-point 0 0 52 68 0 0) #(struct:pulled-point 0 0 35 68"
 #" 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0"
 #" 0 53 52 0 0) #(struct:pulled-point 0 0 68 52 0 0) #(struct:pulled-p"
 #"oint 0 0 68 67 0 0) #(struct:pulled-point 0 0 53 67 0 0)) 255 \"Whit"
 #"e\")) #(struct:polygon (#(struct:pulled-point 0 0 52 51 0 0) #(struc"
 #"t:pulled-point 0 0 69 51 0 0) #(struct:pulled-point 0 0 69 68 0 0) #"
 #"(struct:pulled-point 0 0 52 68 0 0)) 255 \"LightGray\")) #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 70 52 0 0) #(struct:pulled-point 0 "
 #"0 85 52 0 0) #(struct:pulled-point 0 0 85 67 0 0) #(struct:pulled-po"
 #"int 0 0 70 67 0 0)) 255 \"ForestGreen\")) #(struct:polygon (#(struct"
 #":pulled-point 0 0 69 51 0 0) #(struct:pulled-point 0 0 86 51 0 0) #("
 #"struct:pulled-point 0 0 86 68 0 0) #(struct:pulled-point 0 0 69 68 0"
 #" 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0"
 #" 87 52 0 0) #(struct:pulled-point 0 0 102 52 0 0) #(struct:pulled-po"
 #"int 0 0 102 67 0 0) #(struct:pulled-point 0 0 87 67 0 0)) 255 \"Dodg"
 #"erBlue\")) #(struct:polygon (#(struct:pulled-point 0 0 86 51 0 0) #("
 #"struct:pulled-point 0 0 103 51 0 0) #(struct:pulled-point 0 0 103 68"
 #" 0 0) #(struct:pulled-point 0 0 86 68 0 0)) 255 \"LightGray\")) #(st"
 #"ruct:bb 103 68 68) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 24 3 1 #" "
0 0 14 3 18 #"small-world-moved2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 8305
(
 #"(#(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:polygon (#(struct:pulled-point 0 0 5/2 5/2 0 0) #(struct:p"
 #"ulled-point 0 0 65/2 5/2 0 0) #(struct:pulled-point 0 0 65/2 65/2 0 "
 #"0) #(struct:pulled-point 0 0 5/2 65/2 0 0)) 255 \"SaddleBrown\") #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 35 0 0 0) #(struct:pulled-point 0 0 35 35 0 0) #(struct:pull"
 #"ed-point 0 0 0 35 0 0)) 255 \"transparent\")) #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 25/2 35 0 0) #(struct:pulled-point 0 0 45/2 35"
 #" 0 0) #(struct:pulled-point 0 0 45/2 45 0 0) #(struct:pulled-point 0"
 #" 0 25/2 45 0 0)) 255 \"transparent\")) #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 10 95/2 0 0) #(struct:pulled-point 0 0 25 95/2 0 0) #"
 #"(struct:pulled-point 0 0 25 125/2 0 0) #(struct:pulled-point 0 0 10 "
 #"125/2 0 0)) 255 \"ForestGreen\")) #(struct:polygon (#(struct:pulled-"
 #"point 0 0 15/2 45 0 0) #(struct:pulled-point 0 0 55/2 45 0 0) #(stru"
 #"ct:pulled-point 0 0 55/2 65 0 0) #(struct:pulled-point 0 0 15/2 65 0"
 #" 0)) 255 \"transparent\")) #(struct:polygon (#(struct:pulled-point 0"
 #" 0 36 1 0 0) #(struct:pulled-point 0 0 51 1 0 0) #(struct:pulled-poi"
 #"nt 0 0 51 16 0 0) #(struct:pulled"
 #"-point 0 0 36 16 0 0)) 255 \"White\")) #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 35 0 0 0) #(struct:pulled-point 0 0 52 0 0 0) #(struc"
 #"t:pulled-point 0 0 52 17 0 0) #(struct:pulled-point 0 0 35 17 0 0)) "
 #"255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 53 1"
 #" 0 0) #(struct:pulled-point 0 0 68 1 0 0) #(struct:pulled-point 0 0 "
 #"68 16 0 0) #(struct:pulled-point 0 0 53 16 0 0)) 255 \"White\")) #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 52 0 0 0) #(struct:pulled-p"
 #"oint 0 0 69 0 0 0) #(struct:pulled-point 0 0 69 17 0 0) #(struct:pul"
 #"led-point 0 0 52 17 0 0)) 255 \"LightGray\")) #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 70 1 0 0) #(struct:pulled-point 0 0 85 1 0 0) "
 #"#(struct:pulled-point 0 0 85 16 0 0) #(struct:pulled-point 0 0 70 16"
 #" 0 0)) 255 \"SaddleBrown\")) #(struct:polygon (#(struct:pulled-point"
 #" 0 0 69 0 0 0) #(struct:pulled-point 0 0 86 0 0 0) #(struct:pulled-p"
 #"oint 0 0 86 17 0 0) #(struct:pulled-point 0 0 69 17 0 0)) 255 \"Ligh"
 #"tGray\")) #(struct:polygon (#(struct:pulled-point 0 0 87 1 0 0) #(st"
 #"ruct:pulled-point 0 0 102 1 0 0) #(struct:pulled-point 0 0 102 16 0 "
 #"0) #(struct:pulled-point 0 0 87 16 0 0)) 255 \"DodgerBlue\")) #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 86 0 0 0) #(struct:pulled-poin"
 #"t 0 0 103 0 0 0) #(struct:pulled-point 0 0 103 17 0 0) #(struct:pull"
 #"ed-point 0 0 86 17 0 0)) 255 \"LightGray\")) #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 36 18 0 0) #(struct:pulled-point 0 0 51 18 0 0)"
 #" #(struct:pulled-point 0 0 51 33 0 0) #(struct:pulled-point 0 0 36 3"
 #"3 0 0)) 255 \"DodgerBlue\")) #(struct:polygon (#(struct:pulled-point"
 #" 0 0 35 17 0 0) #(struct:pulled-point 0 0 52 17 0 0) #(struct:pulled"
 #"-point 0 0 52 34 0 0) #(struct:pulled-point 0 0 35 34 0 0)) 255 \"Li"
 #"ghtGray\")) #(struct:polygon (#(struct:pulled-point 0 0 53 18 0 0) #"
 #"(struct:pulled-point 0 0 68 18 0 0) #(struct:pulled-point 0 0 68 33 "
 #"0 0) #(struct:pulled-point 0 0 53 33 0 0)) 255 \"DimGray\")) #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 52 17 0 0) #(struct:pulled-poin"
 #"t 0 0 69 17 0 0) #(struct:pulled-point 0 0 69 34 0 0) #(struct:pulle"
 #"d-point 0 0 52 34 0 0)) 255 \"LightGray\")) #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 70 18 0 0) #(struct:pulled-point 0 0 85 18 0 0) "
 #"#(struct:pulled-point 0 0 85 20 0 0) #(struct:pulled-point 0 0 70 20"
 #" 0 0)) 255 \"Red\")) #(struct:polygon (#(struct:pulled-point 0 0 70 "
 #"20 0 0) #(struct:pulled-point 0 0 72 20 0 0) #(struct:pulled-point 0"
 #" 0 72 31 0 0) #(struct:pulled-point 0 0 70 31 0 0)) 255 \"Red\")) #("
 #"struct:polygon (#(struct:pulled-point 0 0 72 20 0 0) #(struct:pulled"
 #"-point 0 0 83 20 0 0) #(struct:pulled-point 0 0 83 31 0 0) #(struct:"
 #"pulled-point 0 0 72 31 0 0)) 255 \"ForestGreen\")) #(struct:polygon "
 #"(#(struct:pulled-point 0 0 83 20 0 0) #(struct:pulled-point 0 0 85 2"
 #"0 0 0) #(struct:pulled-point 0 0 85 31 0 0) #(struct:pulled-point 0 "
 #"0 83 31 0 0)) 255 \"Red\")) #(struct:polygon (#(struct:pulled-point "
 #"0 0 70 31 0 0) #(struct:pulled-point 0 0 85 31 0 0) #(struct:pulled-"
 #"point 0 0 85 33 0 0) #(struct:pulled-point 0 0 70 33 0 0)) 255 \"Red"
 #"\")) #(struct:polygon (#(struct:pulled-point 0 0 69 17 0 0) #(struct"
 #":pulled-point 0 0 86 17 0 0) #(struct:pulled-point 0 0 86 34 0 0) #("
 #"struct:pulled-point 0 0 69 34 0 0)) 255 \"LightGray\")) #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 87 18 0 0) #(struct:pulled-point 0 0"
 #" 102 18 0 0) #(struct:pulled-point 0 0 102 33 0 0) #(struct:pulled-p"
 #"oint 0 0 87 33 0 0)) 255 \"DimGray\")) #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 86 17 0 0) #(struct:pulled-point 0 0 103 17 0 0) #(st"
 #"ruct:pulled-point 0 0 103 34 0 0) #(struct:pulled-point 0 0 86 34 0 "
 #"0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 "
 #"36 35 0 0) #(struct:pulled-point 0 0 51 35 0 0) #(struct:pulled-poin"
 #"t 0 0 51 50 0 0) #(struct:pulled-point 0 0 36 50 0 0)) 255 \"ForestG"
 #"reen\")) #(struct:polygon (#(struct:pulled-point 0 0 35 34 0 0) #(st"
 #"ruct:pulled-point 0 0 52 34 0 0) #(struct:pulled-point 0 0 52 51 0 0"
 #") #(struct:pulled-point 0 0 35 51 0 0)) 255 \"LightGray\")) #(struct"
 #":polygon (#(struct:pulled-point 0 0 53 35 0 0) #(struct:pulled-point"
 #" 0 0 68 35 0 0) #(struct:pulled-point 0 0 68 50 0 0) #(struct:pulled"
 #"-point 0 0 53 50 0 0)) 255 \"DimGray\")) #(struct:polygon (#(struct:"
 #"pulled-point 0 0 52 34 0 0) #(struct:pulled-point 0 0 69 34 0 0) #(s"
 #"truct:pulled-point 0 0 69 51 0 0) #(struct:pulled-point 0 0 52 51 0 "
 #"0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 "
 #"70 35 0 0) #(struct:pulled-point 0 0 85 35 0 0) #(struct:pulled-poin"
 #"t 0 0 85 50 0 0) #(struct:pulled-point 0 0 70 50 0 0)) 255 \"ForestG"
 #"reen\")) #(struct:polygon (#(struct:pulled-point 0 0 69 34 0 0) #(st"
 #"ruct:pulled-point 0 0 86 34 0 0) #(struct:pulled-point 0 0 86 51 0 0"
 #") #(struct:pulled-point 0 0 69 51 0 0)) 255 \"LightGray\")) #(struct"
 #":polygon (#(struct:pulled-point 0 0 87 35 0 0) #(struct:pulled-point"
 #" 0 0 102 35 0 0) #(struct:pulled-point 0 0 102 50 0 0) #(struct:pull"
 #"ed-point 0 0 87 50 0 0)) 255 \"DimGray\")) #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 86 34 0 0) #(struct:pulled-point 0 0 103 34 0 0) "
 #"#(struct:pulled-point 0 0 103 51 0 0) #(struct:pulled-point 0 0 86 5"
 #"1 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point "
 #"0 0 36 52 0 0) #(struct:pulled-point 0 0 51 52 0 0) #(struct:pulled-"
 #"point 0 0 51 67 0 0) #(struct:pulled-point 0 0 36 67 0 0)) 255 \"Dod"
 #"gerBlue\")) #(struct:polygon (#(struct:pulled-point 0 0 35 51 0 0) #"
 #"(struct:pulled-point 0 0 52 51 0 0) #(struct:pulled-point 0 0 52 68 "
 #"0 0) #(struct:pulled-point 0 0 35 68 0 0)) 255 \"LightGray\")) #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 53 52 0 0) #(struct:pulled-po"
 #"int 0 0 68 52 0 0) #(struct:pulled-point 0 0 68 67 0 0) #(struct:pul"
 #"led-point 0 0 53 67 0 0)) 255 \"White\")) #(struct:polygon (#(struct"
 #":pulled-point 0 0 52 51 0 0) #(struct:pulled-point 0 0 69 51 0 0) #("
 #"struct:pulled-point 0 0 69 68 0 0) #(struct:pulled-point 0 0 52 68 0"
 #" 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0"
 #" 70 52 0 0) #(struct:pulled-point 0 0 85 52 0 0) #(struct:pulled-poi"
 #"nt 0 0 85 67 0 0) #(struct:pulled-point 0 0 70 67 0 0)) 255 \"Forest"
 #"Green\")) #(struct:polygon (#(struct:pulled-point 0 0 69 51 0 0) #(s"
 #"truct:pulled-point 0 0 86 51 0 0) #(struct:pulled-point 0 0 86 68 0 "
 #"0) #(struct:pulled-point 0 0 69 68 0 0)) 255 \"LightGray\")) #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 87 52 0 0) #(struct:pulled-poin"
 #"t 0 0 102 52 0 0) #(struct:pulled-point 0 0 102 67 0 0) #(struct:pul"
 #"led-point 0 0 87 67 0 0)) 255 \"DodgerBlue\")) #(struct:polygon (#(s"
 #"truct:pulled-point 0 0 86 51 0 0) #(struct:pulled-point 0 0 103 51 0"
 #" 0) #(struct:pulled-point 0 0 103 68 0 0) #(struct:pulled-point 0 0 "
 #"86 68 0 0)) 255 \"LightGray\")) #(struct:bb 103 68 68) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 24 3 1 #" "
0 0 14 3 13 #"crowded-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 9737
(
 #"(#(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:overlay #(struct:overlay #(struct:overlay"
 #" #(struct:overlay #(struct:polygon (#(struct:pulled-point 0 0 5/2 5/"
 #"2 0 0) #(struct:pulled-point 0 0 65/2 5/2 0 0) #(struct:pulled-point"
 #" 0 0 65/2 65/2 0 0) #(struct:pulled-point 0 0 5/2 65/2 0 0)) 255 \"S"
 #"addleBrown\") #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 35 0 0 0) #(struct:pulled-point 0 0 35 35 0"
 #" 0) #(struct:pulled-point 0 0 0 35 0 0)) 255 \"transparent\")) #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 25/2 35 0 0) #(struct:pulled-"
 #"point 0 0 45/2 35 0 0) #(struct:pulled-point 0 0 45/2 45 0 0) #(stru"
 #"ct:pulled-point 0 0 25/2 45 0 0)) 255 \"transparent\")) #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 10 95/2 0 0) #(struct:pulled-point 0"
 #" 0 25 95/2 0 0) #(struct:pulled-point 0 0 25 125/2 0 0) #(struct:pul"
 #"led-point 0 0 10 125/2 0 0)) 255 \"DimGray\")) #(struct:polygon (#(s"
 #"truct:pulled-point 0 0 15/2 45 0 0) #(struct:pulled-point 0 0 55/2 4"
 #"5 0 0) #(struct:pulled-point 0 0 55/2 65 0 0) #(struct:pulled-point "
 #"0 0 15/2 65 0 0)) 255 \"transparent\")) #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 10 135/2 0 0) #(struct:pulled-point 0 0 25 135/2 0 0"
 #") #(struct:pulled-point 0 0 25 165/2 0 0) #(struct:pulled-point 0 0 "
 #"10 165/2 0 0)) 255 \"DodgerBlue\")) #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 15/2 65 0 0) #(struct:pulled-point 0 0 55/2 65 0 0) #(st"
 #"ruct:pulled-point 0 0 55/2 85 0 0) #(struct:pulled-point 0 0 15/2 85"
 #" 0 0)) 255 \"transparent\")) #(struct:polygon (#(struct:pulled-point"
 #" 0 0 36 1 0 0) #(struct:pulled-point 0 0 51 1 0 0) #(struct:pulled-p"
 #"oint 0 0 51 16 0 0) #(struct:pulled-point 0 0 36 16 0 0)) 255 \"Whit"
 #"e\")) #(struct:polygon (#(struct:pulled-point 0 0 35 0 0 0) #(struct"
 #":pulled-point 0 0 52 0 0 0) #(struct:pulled-point 0 0 52 17 0 0) #(s"
 #"truct:pulled-point 0 0 35 17 0 0)) 255 \"LightGray\")) #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 53 1 0 0) #(struct:pulled-point 0 0 5"
 #"5 1 0 0) #(struct:pulled-point 0 0 55 16 0 0) #(struct:pulled-point "
 #"0 0 53 16 0 0)) 255 \"Gold\")) #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 55 1 0 0) #(struct:pulled-point 0 0 68 1 0 0) #(struct:pulled"
 #"-point 0 0 68 16 0 0) #(struct:pulled-point 0 0 55 16 0 0)) 255 \"Fo"
 #"restGreen\")) #(struct:polygon (#(struct:pulled-point 0 0 52 0 0 0) "
 #"#(struct:pulled-point 0 0 69 0 0 0) #(struct:pulled-point 0 0 69 17 "
 #"0 0) #(struct:pulled-point 0 0 52 17 0 0)) 255 \"LightGray\")) #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 70 1 0 0) #(struct:pulled-poi"
 #"nt 0 0 85 1 0 0) #(struct:pulled-point 0 0 85 3 0 0) #(struct:pulled"
 #"-point 0 0 70 3 0 0)) 255 \"Red\")) #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 70 3 0 0) #(struct:pulled-point 0 0 72 3 0 0) #(struct:p"
 #"ulled-point 0 0 72 14 0 0) #(struct:pulled-point 0 0 70 14 0 0)) 255"
 #" \"Red\")) #(struct:polygon (#(struct:pulled-point 0 0 72 3 0 0) #(s"
 #"truct:pulled-point 0 0 74 3 0 0) #(struct:pulled-point 0 0 74 14 0 0"
 #") #(struct:pulled-point 0 0 72 14 0 0)) 255 \"Gold\")) #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 74 3 0 0) #(struct:pulled-point 0 0 8"
 #"3 3 0 0) #(struct:pulled-point 0 0 83 14 0 0) #(struct:pulled-point "
 #"0 0 74 14 0 0)) 255 \"DimGray\")) #(struct:polygon (#(struct:pulled-"
 #"point 0 0 83 3 0 0) #(struct:pulled-point 0 0 85 3 0 0) #(struct:pul"
 #"led-point 0 0 85 14 0 0) #(struct:"
 #"pulled-point 0 0 83 14 0 0)) 255 \"Red\")) #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 70 14 0 0) #(struct:pulled-point 0 0 85 14 0 0) #"
 #"(struct:pulled-point 0 0 85 16 0 0) #(struct:pulled-point 0 0 70 16 "
 #"0 0)) 255 \"Red\")) #(struct:polygon (#(struct:pulled-point 0 0 69 0"
 #" 0 0) #(struct:pulled-point 0 0 86 0 0 0) #(struct:pulled-point 0 0 "
 #"86 17 0 0) #(struct:pulled-point 0 0 69 17 0 0)) 255 \"LightGray\"))"
 #" #(struct:polygon (#(struct:pulled-point 0 0 87 1 0 0) #(struct:pull"
 #"ed-point 0 0 102 1 0 0) #(struct:pulled-point 0 0 102 16 0 0) #(stru"
 #"ct:pulled-point 0 0 87 16 0 0)) 255 \"DodgerBlue\")) #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 86 0 0 0) #(struct:pulled-point 0 0 103"
 #" 0 0 0) #(struct:pulled-point 0 0 103 17 0 0) #(struct:pulled-point "
 #"0 0 86 17 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 36 18 0 0) #(struct:pulled-point 0 0 51 18 0 0) #(struct"
 #":pulled-point 0 0 51 33 0 0) #(struct:pulled-point 0 0 36 33 0 0)) 2"
 #"55 \"DodgerBlue\")) #(struct:polygon (#(struct:pulled-point 0 0 35 1"
 #"7 0 0) #(struct:pulled-point 0 0 52 17 0 0) #(struct:pulled-point 0 "
 #"0 52 34 0 0) #(struct:pulled-point 0 0 35 34 0 0)) 255 \"LightGray\""
 #")) #(struct:polygon (#(struct:pulled-point 0 0 53 18 0 0) #(struct:p"
 #"ulled-point 0 0 68 18 0 0) #(struct:pulled-point 0 0 68 33 0 0) #(st"
 #"ruct:pulled-point 0 0 53 33 0 0)) 255 \"DimGray\")) #(struct:polygon"
 #" (#(struct:pulled-point 0 0 52 17 0 0) #(struct:pulled-point 0 0 69 "
 #"17 0 0) #(struct:pulled-point 0 0 69 34 0 0) #(struct:pulled-point 0"
 #" 0 52 34 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pulled"
 #"-point 0 0 70 18 0 0) #(struct:pulled-point 0 0 85 18 0 0) #(struct:"
 #"pulled-point 0 0 85 33 0 0) #(struct:pulled-point 0 0 70 33 0 0)) 25"
 #"5 \"ForestGreen\")) #(struct:polygon (#(struct:pulled-point 0 0 69 1"
 #"7 0 0) #(struct:pulled-point 0 0 86 17 0 0) #(struct:pulled-point 0 "
 #"0 86 34 0 0) #(struct:pulled-point 0 0 69 34 0 0)) 255 \"LightGray\""
 #")) #(struct:polygon (#(struct:pulled-point 0 0 87 18 0 0) #(struct:p"
 #"ulled-point 0 0 102 18 0 0) #(struct:pulled-point 0 0 102 33 0 0) #("
 #"struct:pulled-point 0 0 87 33 0 0)) 255 \"DimGray\")) #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 86 17 0 0) #(struct:pulled-point 0 0 1"
 #"03 17 0 0) #(struct:pulled-point 0 0 103 34 0 0) #(struct:pulled-poi"
 #"nt 0 0 86 34 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 36 35 0 0) #(struct:pulled-point 0 0 51 35 0 0) #(str"
 #"uct:pulled-point 0 0 51 50 0 0) #(struct:pulled-point 0 0 36 50 0 0)"
 #") 255 \"ForestGreen\")) #(struct:polygon (#(struct:pulled-point 0 0 "
 #"35 34 0 0) #(struct:pulled-point 0 0 52 34 0 0) #(struct:pulled-poin"
 #"t 0 0 52 51 0 0) #(struct:pulled-point 0 0 35 51 0 0)) 255 \"LightGr"
 #"ay\")) #(struct:polygon (#(struct:pulled-point 0 0 53 35 0 0) #(stru"
 #"ct:pulled-point 0 0 68 35 0 0) #(struct:pulled-point 0 0 68 50 0 0) "
 #"#(struct:pulled-point 0 0 53 50 0 0)) 255 \"DimGray\")) #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 52 34 0 0) #(struct:pulled-point 0 0"
 #" 69 34 0 0) #(struct:pulled-point 0 0 69 51 0 0) #(struct:pulled-poi"
 #"nt 0 0 52 51 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 70 35 0 0) #(struct:pulled-point 0 0 85 35 0 0) #(str"
 #"uct:pulled-point 0 0 85 50 0 0) #(struct:pulled-point 0 0 70 50 0 0)"
 #") 255 \"ForestGreen\")) #(struct:polygon (#(struct:pulled-point 0 0 "
 #"69 34 0 0) #(struct:pulled-point 0 0 86 34 0 0) #(struct:pulled-poin"
 #"t 0 0 86 51 0 0) #(struct:pulled-point 0 0 69 51 0 0)) 255 \"LightGr"
 #"ay\")) #(struct:polygon (#(struct:pulled-point 0 0 87 35 0 0) #(stru"
 #"ct:pulled-point 0 0 102 35 0 0) #(struct:pulled-point 0 0 102 50 0 0"
 #") #(struct:pulled-point 0 0 87 50 0 0)) 255 \"DimGray\")) #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 86 34 0 0) #(struct:pulled-point 0"
 #" 0 103 34 0 0) #(struct:pulled-point 0 0 103 51 0 0) #(struct:pulled"
 #"-point 0 0 86 51 0 0)) 255 \"LightGray\")) #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 36 52 0 0) #(struct:pulled-point 0 0 51 52 0 0) #"
 #"(struct:pulled-point 0 0 51 67 0 0) #(struct:pulled-point 0 0 36 67 "
 #"0 0)) 255 \"DodgerBlue\")) #(struct:polygon (#(struct:pulled-point 0"
 #" 0 35 51 0 0) #(struct:pulled-point 0 0 52 51 0 0) #(struct:pulled-p"
 #"oint 0 0 52 68 0 0) #(struct:pulled-point 0 0 35 68 0 0)) 255 \"Ligh"
 #"tGray\")) #(struct:polygon (#(struct:pulled-point 0 0 53 52 0 0) #(s"
 #"truct:pulled-point 0 0 55 52 0 0) #(struct:pulled-point 0 0 55 67 0 "
 #"0) #(struct:pulled-point 0 0 53 67 0 0)) 255 \"Gold\")) #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 55 52 0 0) #(struct:pulled-point 0 0"
 #" 68 52 0 0) #(struct:pulled-point 0 0 68 67 0 0) #(struct:pulled-poi"
 #"nt 0 0 55 67 0 0)) 255 \"DimGray\")) #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 52 51 0 0) #(struct:pulled-point 0 0 69 51 0 0) #(struc"
 #"t:pulled-point 0 0 69 68 0 0) #(struct:pulled-point 0 0 52 68 0 0)) "
 #"255 \"LightGray\")) #(struct:polygon (#(struct:pulled-point 0 0 70 5"
 #"2 0 0) #(struct:pulled-point 0 0 85 52 0 0) #(struct:pulled-point 0 "
 #"0 85 67 0 0) #(struct:pulled-point 0 0 70 67 0 0)) 255 \"ForestGreen"
 #"\")) #(struct:polygon (#(struct:pulled-point 0 0 69 51 0 0) #(struct"
 #":pulled-point 0 0 86 51 0 0) #(struct:pulled-point 0 0 86 68 0 0) #("
 #"struct:pulled-point 0 0 69 68 0 0)) 255 \"LightGray\")) #(struct:cro"
 #"p (#(struct:point 87 52) #(struct:point 102 52) #(struct:point 102 6"
 #"7) #(struct:point 87 67)) #(struct:overlay #(struct:overlay #(struct"
 #":overlay #(struct:translate 89.0 59.5 #(struct:text \"3\" 0 1 \"Gold"
 #"\" 8 #f swiss normal normal #f)) #(struct:translate 93.0 59.5 #(stru"
 #"ct:text \"0\" 0 1 \"Gold\" 8 #f swiss normal normal #f))) #(struct:t"
 #"ranslate 97.0 59.5 #(struct:text \"0\" 0 1 \"Gold\" 8 #f swiss norma"
 #"l normal #f))) #(struct:polygon (#(struct:pulled-point 0 0 87 52 0 0"
 #") #(struct:pulled-point 0 0 102 52 0 0) #(struct:pulled-point 0 0 10"
 #"2 67 0 0) #(struct:pulled-point 0 0 87 67 0 0)) 255 \"Firebrick\")))"
 #") #(struct:polygon (#(struct:pulled-point 0 0 86 51 0 0) #(struct:pu"
 #"lled-point 0 0 103 51 0 0) #(struct:pulled-point 0 0 103 68 0 0) #(s"
 #"truct:pulled-point 0 0 86 68 0 0)) 255 \"LightGray\")) #(struct:bb 1"
 #"03 85 85.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; find-player : ID -> world -> orientation or #f"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; gets the orientation for a player in the world, or #f if the playe"
 #"r isn't there"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"find-player"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"find-player-cells"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-player-cells"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 8 #"find-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 3 #") ("
0 0 14 3 11 #"has-player?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 6 #"player"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 6 #"player"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 12 #"cell-players"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 6 #"))))])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 16 #"make-orientation"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 13 #"player-xdelta"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 3 #") ("
0 0 14 3 13 #"player-ydelta"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; tests for find-player"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"find-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"find-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 3 #") ("
0 0 14 3 16 #"make-orientation"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"find-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player5\""
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; in-bounds : posn -> list-of (list-of 'a) -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #"; returns whether the given posn is within bounds for the cells. err"
 #"ors if the world is size zero."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bounds"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 5 #"max-x"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 5 #"max-y"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #") "
0 0 14 3 5 #"max-x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #") "
0 0 14 3 5 #"max-y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; tests for in-bounds"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bounds"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bounds"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bounds"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bounds"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bounds"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; occupied : posn -> world -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #"; checks if the square cannot be moved to. right now, this just mean"
 #"s that it has"
) 0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; rock on it, but one could imagine other collision detection later."
 #" errors if given"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #"; something out of bounds."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"occupied"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"has-rock?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; tests for occupied"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"occupied"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"occupied"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; move : ID -> x-delta -> y-delta -> world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #"; moves given player ID by given delta, provided that it doesn't mov"
 #"e them off of the map."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 5 #"xdelt"
0 0 24 3 1 #" "
0 0 14 3 5 #"ydelt"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"make-package"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"move-cells"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 5 #"xdelt"
0 0 24 3 1 #" "
0 0 14 3 5 #"ydelt"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 14 3 5 #"xdelt"
0 0 24 3 1 #" "
0 0 14 3 5 #"ydelt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"move-cells"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 5 #"xdelt"
0 0 24 3 1 #" "
0 0 14 3 5 #"ydelt"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 10 #"old-player"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-player-cells"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"old-player"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"old-posn"
0 0 24 3 2 #" ("
0 0 14 3 16 #"orientation-posn"
0 0 24 3 1 #" "
0 0 14 3 10 #"old-player"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 8 #"new-posn"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"xdelt"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-posn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"ydelt"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-posn"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bounds"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-posn"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"occupied"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-posn"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"old-cell"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-posn"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 9 #"moved-out"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 7 #"set-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 14 3 8 #"old-posn"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 6 #"player"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-cell"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 8 #"new-cell"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 1 #" "
0 0 14 3 9 #"moved-out"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-posn"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 9 #"dir-xdelt"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"xdelt"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"ydelt"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"orientation-xdelta"
0 0 24 3 1 #" "
0 0 14 3 10 #"old-player"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"xdelt"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 9 #"dir-ydelt"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"xdelt"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"ydelt"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"orientation-ydelta"
0 0 24 3 1 #" "
0 0 14 3 10 #"old-player"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"ydelt"
0 0 24 3 4 #"])])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"set-pos"
0 0 24 3 1 #" "
0 0 14 3 9 #"moved-out"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 8 #"new-posn"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 9 #"dir-xdelt"
0 0 24 3 1 #" "
0 0 14 3 9 #"dir-ydelt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-cell"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 75
(
 #"; in this branch, they tried to move but couldn't, either because th"
 #"ey were"
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 76
(
 #"; at the edge of the map or trying to walk over something that block"
 #"ed them."
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 77
(
 #"; while they can't move, we _should_ ensure their orientation is fac"
 #"ing where"
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 19 #"; they tried to go."
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"old-cell"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-posn"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 8 #"new-cell"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 14 3 6 #"player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 54 #"                                                     ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 5 #"xdelt"
0 0 24 3 1 #" "
0 0 14 3 5 #"ydelt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                     "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-cell"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"set-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-posn"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-cell"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; tests for move"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"packagify"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 12 #"make-package"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 3 #") ("
0 0 14 3 9 #"packagify"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 3 #") ("
0 0 14 3 9 #"packagify"
0 0 24 3 1 #" "
0 0 14 3 17 #"small-world-moved"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 17 #"small-world-moved"
0 0 24 3 3 #") ("
0 0 14 3 9 #"packagify"
0 0 24 3 1 #" "
0 0 14 3 18 #"small-world-moved*"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 17 #"small-world-moved"
0 0 24 3 3 #") ("
0 0 14 3 9 #"packagify"
0 0 24 3 1 #" "
0 0 14 3 17 #"small-world-moved"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 3 #") ("
0 0 14 3 9 #"packagify"
0 0 24 3 1 #" "
0 0 14 3 18 #"small-world-moved2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player2\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 3 #") ("
0 0 14 3 9 #"packagify"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; handle-key : World-State -> key-event -> World-State"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; dispatches keys to the proper handler, as follows:"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; directional arrows (left, right, up, down): move current player"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"move"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"move"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"move"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"move"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"s\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"smash"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"p\""
0 0 24 3 3 #") ("
0 0 14 3 5 #"place"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"r\""
0 0 24 3 3 #") ("
0 0 14 3 15 #"rotate-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; test for handle-key"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"packagify"
0 0 24 3 1 #" "
0 0 14 3 17 #"small-world-moved"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"packagify"
0 0 24 3 1 #" "
0 0 14 3 18 #"small-world-moved2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"packagify"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"packagify"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-world"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"s\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"smashify"
0 0 24 3 1 #" "
0 0 14 3 25 #"small-world-water-smashed"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world1"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"p\""
0 0 24 3 3 #") ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world1"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"r\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 29 1 #"\n"
0 0 24 3 56 #"                                                       ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"q\""
0 0 24 3 2 #") "
0 0 14 3 11 #"small-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; generate-map : number -> number -> list-of (list-of cell)"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; given a width and a height, generates a random map of cells, popul"
 #"ated by"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #"; 'water, 'rock, and 'grass."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"generate-map"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"palette"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"palette"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 7 #"palette"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"list"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; tests for generate-map"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"check-satisfied"
0 0 24 3 2 #" ("
0 0 14 3 12 #"generate-map"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cells"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")) "
0 0 21 3 1 #"4"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"check-satisfied"
0 0 24 3 2 #" ("
0 0 14 3 12 #"generate-map"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cells"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 13 #"has-material?"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; smash : ID -> world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; smash the material on top that is in front of the given player, if"
 #" there is anything."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"smash"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"make-package"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"smash-cells"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"smash"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"smash-cells"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 11 #"orientation"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-player-cells"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 11 #"orientation"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"cells"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 10 #"player-pos"
0 0 24 3 2 #" ("
0 0 14 3 16 #"orientation-posn"
0 0 24 3 1 #" "
0 0 14 3 11 #"orientation"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 10 #"target-pos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 18 #"orientation-xdelta"
0 0 24 3 1 #" "
0 0 14 3 11 #"orientation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 10 #"player-pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 18 #"orientation-ydelta"
0 0 24 3 1 #" "
0 0 14 3 11 #"orientation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 10 #"player-pos"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bounds"
0 0 24 3 1 #" "
0 0 14 3 10 #"target-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 10 #"target-pos"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 3 #")) "
0 0 14 3 5 #"cells"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"set-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 10 #"target-pos"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 5 #"cells"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; tests for smash"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"smashify"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 12 #"make-package"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"smash"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"smash"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 3 #") ("
0 0 14 3 8 #"smashify"
0 0 24 3 1 #" "
0 0 14 3 25 #"small-world-water-smashed"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"smash"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player3\""
0 0 24 3 1 #" "
0 0 14 3 13 #"crowded-world"
0 0 24 3 3 #") ("
0 0 14 3 8 #"smashify"
0 0 24 3 1 #" "
0 0 14 3 13 #"crowded-world"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"smash"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 19 #"small-world-stacked"
0 0 24 3 3 #") ("
0 0 14 3 8 #"smashify"
0 0 24 3 1 #" "
0 0 14 3 27 #"small-world-stacked-smashed"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"smash"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 14 3 17 #"small-world-moved"
0 0 24 3 3 #") ("
0 0 14 3 8 #"smashify"
0 0 24 3 1 #" "
0 0 14 3 17 #"small-world-moved"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"smash"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player4\""
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 3 #") ("
0 0 14 3 8 #"smashify"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; place : ID -> 'material -> world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; place the following material in front of the player, provided it i"
 #"s possible"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; you can't anything on rock, you can only put rock on water, and pu"
 #"tting water"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #"; on something else destroys it"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 8 #"material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"make-package"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"place-cells"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 8 #"material"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 14 3 8 #"material"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"place-cells"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 8 #"material"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 11 #"orientation"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-player-cells"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 11 #"orientation"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"cells"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 10 #"player-pos"
0 0 24 3 2 #" ("
0 0 14 3 16 #"orientation-posn"
0 0 24 3 1 #" "
0 0 14 3 11 #"orientation"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 10 #"target-pos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 18 #"orientation-xdelta"
0 0 24 3 1 #" "
0 0 14 3 11 #"orientation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 10 #"player-pos"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 18 #"orientation-ydelta"
0 0 24 3 1 #" "
0 0 14 3 11 #"orientation"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 10 #"player-pos"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bounds"
0 0 24 3 1 #" "
0 0 14 3 10 #"target-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 10 #"target-pos"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 9 #"materials"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 13 #"new-materials"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"materials"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 8 #"material"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                      [("
0 0 14 3 9 #"has-rock?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 2 #") "
0 0 14 3 9 #"materials"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                      [("
0 0 14 3 10 #"has-water?"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 8 #"material"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                             ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 14 3 9 #"materials"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                             "
0 0 14 3 9 #"materials"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 8 #"material"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 8 #"material"
0 0 24 3 1 #" "
0 0 14 3 9 #"materials"
0 0 24 3 6 #"))])])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"set-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 14 3 10 #"target-pos"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 9 #"make-cell"
0 0 24 3 1 #" "
0 0 14 3 13 #"new-materials"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 5 #"cells"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; sample data for place tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-wood"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world3"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world4"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 14 3 20 #"cell-with-rock-water"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world5"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 14 3 19 #"cell-with-materials"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world6"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 14 3 24 #"cell-with-rock-materials"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world7"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 14 3 25 #"cell-with-fewer-materials"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; tests for place"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 12 #"make-package"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world3"
0 0 24 3 3 #") ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world3"
0 0 24 3 3 #") ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world3"
0 0 24 3 3 #") ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world5"
0 0 24 3 3 #") ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world5"
0 0 24 3 3 #") ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world7"
0 0 24 3 3 #") ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world6"
0 0 24 3 3 #") ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player2\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world1"
0 0 24 3 3 #") ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 17 #"small-world-moved"
0 0 24 3 3 #") ("
0 0 14 3 7 #"placify"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 17 #"small-world-moved"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; rotate-material : world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; changes which material is currently being placed"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"rotate-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 9 #"find-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"materials"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #")) "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"next"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"materials"
0 0 24 3 1 #" "
0 0 14 3 9 #"materials"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 4 #"next"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; tests for rotate-material"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"rotate-material"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 9 #"materials"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 9 #"materials"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"rotate-material"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 9 #"materials"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 9 #"materials"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; has? : ('a -> bool) -> list 'a -> bool"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"has?"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"has?"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"has?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"has?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"has?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"has?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; find-adjacent : posn -> list posn"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #"; returns all the posns that are immediately adjacent (including its"
 #"elf), based on"
) 0 0 24 29 1 #"\n"
0 0 17 3 48 #"; the size of the world TILEWIDTH and TILEHEIGHT"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-adjacent"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" (("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"valid?"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #") "
0 0 14 3 9 #"TILEWIDTH"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 2 #") "
0 0 14 3 10 #"TILEHEIGHT"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 6 #"valid?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 1 #"p"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; tnt-handler : world -> world"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; decrements the counter on every tnt in the world. if any are <= 0,"
 #" every material on their"
) 0 0 24 29 1 #"\n"
0 0 17 3 48 #"; cell and all adjacent cells get removed. boom!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tnt-handler"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 17 #"tnt-handler-cells"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"tnt-handler-cells"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 17 #"decremented-cells"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 3 #") ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 86
(
 #"                                                                    "
 #"                 ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-tnt?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 90
(
 #"                                                                    "
 #"                     ("
) 0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"tnt"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 89
(
 #"                                                                    "
 #"                     "
) 0 0 14 3 1 #"m"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 84
(
 #"                                                                    "
 #"               ("
) 0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 79
(
 #"                                                                    "
 #"          ("
) 0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                    "
0 0 14 3 3 #"row"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 5 #"cells"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 9 #"exploding"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mapi"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 4 #"mapi"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"has?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"is-tnt?"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 114
(
 #"                                                                    "
 #"                                             ("
) 0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 97
(
 #"                                                                    "
 #"                            ("
) 0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 91
(
 #"                                                                    "
 #"                      ("
) 0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 91
(
 #"                                                                    "
 #"                      ("
) 0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 69
(
 #"                                                                    "
 #" "
) 0 0 14 3 3 #"row"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 17 #"decremented-cells"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 94
(
 #"; note: this will have duplicates, but that's okay. we just look for"
 #" membership when clearing."
) 0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 8 #"to-clear"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 13 #"find-adjacent"
0 0 24 3 1 #" "
0 0 14 3 9 #"exploding"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 9 #"new-cells"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mapi"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 3 #") ("
0 0 14 3 4 #"mapi"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 14 3 8 #"to-clear"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 70
(
 #"                                                                    "
 #" ("
) 0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 69
(
 #"                                                                    "
 #" "
) 0 0 14 3 4 #"cell"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                                "
0 0 14 3 3 #"row"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 17 #"decremented-cells"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 9 #"new-cells"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; sample data for tnt-handler tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"tnt-world1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-wood"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-tnt-5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-rock"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-wood"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"tnt-world2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-water"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 1 #" "
0 0 14 3 14 #"cell-with-wood"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; tests for tnt-handler"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"tnt-handler"
0 0 24 3 1 #" "
0 0 14 3 10 #"tnt-world1"
0 0 24 3 2 #") "
0 0 14 3 10 #"tnt-world2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; single-play : () ->"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; launches big bang with appropriate arguments."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"single-play"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 12 #"generate-map"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 15 3 11 #"with-player"
0 0 24 3 2 #" ("
0 0 14 3 7 #"set-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 9 #"make-cell"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"player1"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 8 #"big-bang"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 15 3 11 #"with-player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 12 #"render-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 11 #"tnt-handler"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #"; multi-player specific code (the above _does_ add messages that are"
 #" only"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #"; relevant in multi-player)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; cells->sexp : cells -> sexp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"cells->sexp"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 3 #") ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 10 #"cell->sexp"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 3 #")) "
0 0 14 3 5 #"cells"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; test for cells->sexp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"cells->sexp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; sexp->cells : sexp -> cells"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sexp->cells"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 3 #") ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 10 #"sexp->cell"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 3 #")) "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; tests for sexp->cells"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"sexp->cells"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; cell->sexp : cell -> sexp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"cell->sexp"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 3 #") ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 12 #"player->sexp"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; tests for cell->sexp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"cell->sexp"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"cell->sexp"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-grass"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"cell->sexp"
0 0 24 3 1 #" "
0 0 14 3 15 #"cell-with-stuff"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"rock"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"water"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 56 #"                                                       ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player2\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; sexp->cell : sexp -> cell"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"sexp->cell"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 12 #"sexp->player"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 53 #"\"sexp->cell: wasn't passed an sexp of the right form\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; tests for sexp->cell"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"sexp->cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"grass"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"sexp->cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"p1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"p1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 24 3 2 #" ("
0 0 14 3 10 #"sexp->cell"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")) "
0 0 19 3 53 #"\"sexp->cell: wasn't passed an sexp of the right form\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; player->sexp : player -> sexp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"player->sexp"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"player"
0 0 24 3 2 #" ("
0 0 14 3 9 #"player-id"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 3 #") ("
0 0 14 3 13 #"player-xdelta"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 3 #") ("
0 0 14 3 13 #"player-ydelta"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; tests for player->sexp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"player->sexp"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; sexp->player : sexp -> player"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sexp->player"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"player"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 11 #"make-player"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #") ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #") ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 55 #"\"sexp->player: wasn't passed an sexp of the right form\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; tests for sexp->player"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sexp->player"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-error"
0 0 24 3 2 #" ("
0 0 14 3 12 #"sexp->player"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")) "
0 0 19 3 55 #"\"sexp->player: wasn't passed an sexp of the right form\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; add-player : world -> player -> posn -> world"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; adds a player to a given position on the world. errors if not pres"
 #"ent"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"add-player"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #" "
0 0 14 3 4 #"posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"old-cell"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 4 #"posn"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 8 #"new-cell"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 8 #"old-cell"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"set-pos"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 4 #"posn"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-cell"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; tests for add-player"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"one-cell-empty-world"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 10 #"empty-cell"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"one-cell-player-world"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"add-player"
0 0 24 3 1 #" "
0 0 14 3 20 #"one-cell-empty-world"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 21 #"one-cell-player-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; remove-player : world -> ID -> world"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #"; removes a player from the world, regardless of where they are. sil"
 #"ently succeeds if"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #"; they were not in the world, and also _may_ succeed if the player i"
 #"s (erroneously) in"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #"; more than one place at once."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"remove-player"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 19 #"remove-player-cells"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 1 #"p"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"remove-player-cells"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"player"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"player-id"
0 0 24 3 1 #" "
0 0 14 3 6 #"player"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                 "
0 0 14 3 1 #"p"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 12 #"cell-players"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 3 #"row"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 5 #"cells"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; tests for remove-player"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"remove-player"
0 0 24 3 1 #" "
0 0 14 3 21 #"one-cell-player-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 2 #") "
0 0 14 3 20 #"one-cell-empty-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"remove-player"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player2\""
0 0 24 3 2 #") "
0 0 14 3 11 #"small-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; receive-msg : world -> sexp -> world"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #"; takes messages from the universe that reflect either them 'join/'l"
 #"eaveing, a new 'map from"
) 0 0 24 29 1 #"\n"
0 0 17 3 43 #"; the server, or actions from other players"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"receive-msg"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"map"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"sexp->cells"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"join"
0 0 24 3 3 #") ("
0 0 14 3 10 #"add-player"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 12 #"sexp->player"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"move"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 10 #"move-cells"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"smash"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 11 #"smash-cells"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"place"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 15 #"world-player-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 14 #"world-material"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 11 #"place-cells"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #") ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"left"
0 0 24 3 3 #") ("
0 0 14 3 13 #"remove-player"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; tests for receive-msg"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"receive-msg"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"map"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 19 3 9 #"\"player1\""
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 11 #"cells->sexp"
0 0 24 3 2 #" ("
0 0 14 3 11 #"world-cells"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 11 #"tiny-world1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"tiny-world-player2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 16 #"cell-with-player"
0 0 24 3 1 #" "
0 0 14 3 17 #"cell-with-player2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"receive-msg"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"join"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 12 #"player->sexp"
0 0 24 3 1 #" "
0 0 14 3 7 #"player2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 14 3 18 #"tiny-world-player2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"receive-msg"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 14 3 17 #"small-world-moved"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"receive-msg"
0 0 24 3 1 #" "
0 0 14 3 11 #"small-world"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"smash"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 3 #")) "
0 0 14 3 25 #"small-world-water-smashed"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"receive-msg"
0 0 24 3 1 #" "
0 0 14 3 11 #"tiny-world1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"player1\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 3 #")) "
0 0 14 3 11 #"tiny-world2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; multi-play : () ->"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; launches big bang with appropriate arguments."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"multi-play"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"TILEHEIGHT"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"TILEWIDTH"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 2 #") "
0 0 14 3 10 #"empty-cell"
0 0 24 3 6 #"))))])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 8 #"big-bang"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"wood"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 12 #"render-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 11 #"tnt-handler"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"on-receive"
0 0 24 3 1 #" "
0 0 14 3 11 #"receive-msg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"register"
0 0 24 3 1 #" "
0 0 14 3 9 #"LOCALHOST"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; THE SERVER. This should live separately, but uses defns from above"
 #", and can't"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #"; export/import student language modules with images."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 6 #"racket"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; UNIVERSE MESSAGE PROTOCOL"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; Messages that clients will send:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; ('move x y)"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; ('smash)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; ('place 'material)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; Messages that clients will receive"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #"; ('map ID CELLS) ; cell/players are encoded as sexp, e.g., '('cell "
 #"('grass) (('player ID 0 1)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 20 #"; ('join PLAYER X Y)"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; ('move ID x y)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; ('smash ID)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; ('place ID 'material)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; ('left ID)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"UNIVERSE-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"UNIVERSE-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; UNIVERSE STATE"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #"; A universe is a list of connected worlds, their posns in the tile "
 #"map, a map from"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; tile positions to the set of player ids that are currently in that"
 #" tile, and"
) 0 0 24 29 1 #"\n"
0 0 17 3 55 #"; a 2d vector of tiles, each of which is a map of cells"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"unistate"
0 0 24 3 2 #" ("
0 0 14 3 6 #"worlds"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 7 #"players"
0 0 24 3 1 #" "
0 0 14 3 5 #"tiles"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; mapi : (nat -> 'a -> b') -> list 'a -> list 'b"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; maps with the zero-based index of the element in the list"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; note that this isn't a proper racket map, as it only takes a singl"
 #"e list."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mapi"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"build-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 6 #"values"
0 0 24 3 2 #") "
0 0 14 3 1 #"l"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; get-vacant-posn : list-of (list-of cell) -> posn"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #"; finds an spot not occupied by 'rock or another player, suitable fo"
 #"r a player to start"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-vacant-posn"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 7 #"shuffle"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"cp"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 9 #"has-rock?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"cp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cell-players"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"cp"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"mapi"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 4 #"mapi"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"row"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                            "
0 0 14 3 5 #"cells"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; vec-get-pos : vector (vector 'a) -> posn -> a"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-get-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; vec-set!-pos : vector (vector 'a) -> posn -> a -> void"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"vec-set!-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #") "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"new-handler"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 9 #"player-id"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 14 #"UNIVERSE-WIDTH"
0 0 24 3 3 #") ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 15 #"UNIVERSE-HEIGHT"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 9 #"old-cells"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-get-pos"
0 0 24 3 2 #" ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 10 #"vacant-pos"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-vacant-posn"
0 0 24 3 1 #" "
0 0 14 3 9 #"old-cells"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 11 #"target-cell"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 1 #" "
0 0 14 3 9 #"old-cells"
0 0 24 3 1 #" "
0 0 14 3 10 #"vacant-pos"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 7 #"set-pos"
0 0 24 3 1 #" "
0 0 14 3 9 #"old-cells"
0 0 24 3 1 #" "
0 0 14 3 10 #"vacant-pos"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 11 #"target-cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 14 3 9 #"player-id"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"vec-set!-pos"
0 0 24 3 2 #" ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 8 #"tile-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 9 #"player-id"
0 0 24 3 1 #" "
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 8 #"tile-pos"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"set-union"
0 0 24 3 2 #" ("
0 0 14 3 3 #"set"
0 0 24 3 1 #" "
0 0 14 3 9 #"player-id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #" ("
0 0 14 3 3 #"set"
0 0 24 3 6 #"))))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"make-bundle"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-unistate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 15 #"unistate-worlds"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 4 #")   "
0 0 17 3 26 #"; note: we _mutated_ this!"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 17 3 26 #"; note: we _mutated_ this!"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                )"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-mail"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"map"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 11 #"cells->sexp"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 9 #"broadcast"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"join"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 12 #"player->sexp"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 1 #" "
0 0 14 3 9 #"player-id"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 10 #"vacant-pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 10 #"vacant-pos"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; broadcast : unistate -> iworld -> sexp -> list mail"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; sends a fixed message to all other worlds in the same tile"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"broadcast"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 9 #"neighbors"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #" ("
0 0 14 3 3 #"set"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"w*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"make-mail"
0 0 24 3 1 #" "
0 0 14 3 2 #"w*"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"w*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"iworld=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"w*"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 11 #"set-member?"
0 0 24 3 1 #" "
0 0 14 3 9 #"neighbors"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 2 #"w*"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"unistate-worlds"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 15 3 9 #"with-tile"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 2 #"ms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-get-pos"
0 0 24 3 2 #" ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 8 #"tile-pos"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"vec-set!-pos"
0 0 24 3 2 #" ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 8 #"tile-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"make-bundle"
0 0 24 3 2 #" ("
0 0 14 3 8 #"unistate"
0 0 24 3 2 #" ("
0 0 14 3 15 #"unistate-worlds"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 2 #"ms"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"msg-handler"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 64
#"; if they move off the end of the map but there is another tile,"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 55 #"; move them into it. This causes 'join/'leave messages."
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 9 #"old-cells"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-get-pos"
0 0 24 3 2 #" ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 10 #"old-player"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-player-cells"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 9 #"old-cells"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 12 #"new-tile-pos"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"old-player"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 9 #"in-bounds"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 16 #"orientation-posn"
0 0 24 3 1 #" "
0 0 14 3 10 #"old-player"
0 0 24 3 3 #")) "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 16 #"orientation-posn"
0 0 24 3 1 #" "
0 0 14 3 10 #"old-player"
0 0 24 3 3 #")) "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                                "
0 0 14 3 9 #"old-cells"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 68
#"; since we know they _were_ in bounds of their old tile, we can just"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 70
(
 #"; look at the delta w.r.t. their tile posn. They will move to the ti"
 #"le"
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 78
(
 #"; that corresponds to adding that delta to the tile posn, and then w"
 #"e can just"
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 47 #"; check if that is within bounds for the tiles."
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-tile-pos"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-tile-pos"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-tile-pos"
0 0 24 3 2 #") "
0 0 14 3 14 #"UNIVERSE-WIDTH"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-tile-pos"
0 0 24 3 2 #") "
0 0 14 3 15 #"UNIVERSE-HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 9 #"new-cells"
0 0 24 3 2 #" ("
0 0 14 3 11 #"vec-get-pos"
0 0 24 3 2 #" ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 12 #"new-tile-pos"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 14 #"messages-leave"
0 0 24 3 2 #" ("
0 0 14 3 9 #"broadcast"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 8 #"tile-pos"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"set-remove"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 8 #"tile-pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 12 #"new-tile-pos"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 7 #"set-add"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 12 #"new-tile-pos"
0 0 24 3 2 #" ("
0 0 14 3 3 #"set"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 3 #") ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 12 #"new-tile-pos"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"vec-set!-pos"
0 0 24 3 2 #" ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 14 3 8 #"tile-pos"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 19 #"remove-player-cells"
0 0 24 3 1 #" "
0 0 14 3 9 #"old-cells"
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                        ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 5 #"new-x"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 16 #"orientation-posn"
0 0 24 3 1 #" "
0 0 14 3 10 #"old-player"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 9 #"TILEWIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 5 #"new-y"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 16 #"orientation-posn"
0 0 24 3 1 #" "
0 0 14 3 10 #"old-player"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 10 #"TILEHEIGHT"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 4 #" ])]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 13 #"messages-join"
0 0 24 3 2 #" ("
0 0 14 3 9 #"broadcast"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"join"
0 0 24 29 1 #"\n"
0 0 24 3 51 #"                                                  ("
0 0 14 3 12 #"player->sexp"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 11 #"make-player"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                  "
0 0 14 3 5 #"new-x"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                  "
0 0 14 3 5 #"new-y"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 11 #"target-cell"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-pos"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-cells"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-x"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-y"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 5 #"cells"
0 0 24 3 2 #" ("
0 0 14 3 7 #"set-pos"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-cells"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-x"
0 0 24 3 1 #" "
0 0 14 3 5 #"new-y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 9 #"make-cell"
0 0 24 3 2 #" ("
0 0 14 3 14 #"cell-materials"
0 0 24 3 1 #" "
0 0 14 3 11 #"target-cell"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-player"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"vec-set!-pos"
0 0 24 3 2 #" ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 12 #"new-tile-pos"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"make-bundle"
0 0 24 3 2 #" ("
0 0 14 3 8 #"unistate"
0 0 24 3 2 #" ("
0 0 14 3 15 #"unistate-worlds"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-mail"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #") ("
0 0 14 3 11 #"cells->sexp"
0 0 24 3 1 #" "
0 0 14 3 5 #"cells"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 13 #"messages-join"
0 0 24 3 1 #" "
0 0 14 3 14 #"messages-leave"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 50 #"; otherwise, just do a normal within-tile movement"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 9 #"with-tile"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 10 #"move-cells"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 1 #"y"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 5 #"cells"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 9 #"broadcast"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"move"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 1 #"y"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"smash"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 9 #"with-tile"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"smash-cells"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 5 #"cells"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 9 #"broadcast"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"smash"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"place"
0 0 24 3 1 #" "
0 0 14 3 8 #"material"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 9 #"with-tile"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cells"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"place-cells"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 14 3 8 #"material"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 14 3 5 #"cells"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 9 #"broadcast"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"place"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #") "
0 0 14 3 8 #"material"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"disconnect-handler"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"tile-pos"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 2 #"_*"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 8 #"tile-pos"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"set-remove"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #") "
0 0 14 3 8 #"tile-pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 8 #"messages"
0 0 24 3 2 #" ("
0 0 14 3 9 #"broadcast"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"hash-remove!"
0 0 24 3 2 #" ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 3 #") ("
0 0 14 3 11 #"iworld-name"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"make-bundle"
0 0 24 3 2 #" ("
0 0 14 3 8 #"unistate"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"w*"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"iworld=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"w*"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 5 #"))) ("
0 0 14 3 15 #"unistate-worlds"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 8 #"messages"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"universe-tnt-handler"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"unistate"
0 0 24 3 2 #" ("
0 0 14 3 15 #"unistate-worlds"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"unistate-pos"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 16 #"unistate-players"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"vector-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"row"
0 0 24 3 3 #") ("
0 0 14 3 10 #"vector-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"tile"
0 0 24 3 3 #") ("
0 0 14 3 17 #"tnt-handler-cells"
0 0 24 3 1 #" "
0 0 14 3 4 #"tile"
0 0 24 3 3 #")) "
0 0 14 3 3 #"row"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 14 #"unistate-tiles"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"start-server"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"universe"
0 0 24 3 2 #" ("
0 0 14 3 8 #"unistate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"make-hash"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 9 #"make-hash"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 12 #"build-vector"
0 0 24 3 1 #" "
0 0 14 3 15 #"UNIVERSE-HEIGHT"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 12 #"build-vector"
0 0 24 3 1 #" "
0 0 14 3 14 #"UNIVERSE-WIDTH"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"_"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 12 #"generate-map"
0 0 24 3 1 #" "
0 0 14 3 9 #"TILEWIDTH"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                    "
0 0 14 3 10 #"TILEHEIGHT"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"on-new"
0 0 24 3 1 #" "
0 0 14 3 11 #"new-handler"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"on-msg"
0 0 24 3 1 #" "
0 0 14 3 11 #"msg-handler"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 20 #"universe-tnt-handler"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"on-disconnect"
0 0 24 3 1 #" "
0 0 14 3 18 #"disconnect-handler"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
